1: <xml>
2: <SECTION>
3: <h1>Version</h1>
4: API RELEASE DATE: 2014/01
5: 
6: </SECTION>
7: 
8: <SECTION>
9: <h1>Types of Messages</h1>
10: success	: yay!
11: missing  : this is not an error, but 
12: warning  : something odd happened, but the request was otherwise successful
13: challenge: you will need to complete the task in order to continue.
14: youerr : user (probably correctable) error, ex: invalid phone number
15: youwarn: user (possibly ignorable) error, ex: no firstname in email
16: fileerr : an error occurred with an external file
17: apperr : developer error (probably not correctable by user), ex: data formatting -- this is something the app developer can fix.
18: apierr : server error (probably not correctable by app), ex: facebook plugin did not work, site offline for maintenance, but usually an uncorrectable 3rd party error.
19: iseerr : reserved for application to handle 'server down', 'unreachable' or otherwise 'invalid response format' errors
20: cfgerr : configuration error (something in the server configuration prohibits the request)
21: </SECTION>
22: 
23: <SECTION>
24: <h1></h1>
25: <note>
26: {
27: 	"_version":201318,
28: 	"_start":"xyz",			// default starting position
29: 	"_inputs":[
30: 	   { "required":1,"var":"email","type":"text","label":"Email" },
31: 	   { "required":1,"var":"firstname","type":"text","label":"Purchasing Contact Firstname" },
32: 	   { "required":1,"var":"lastname","type":"text","label":"Purchasing Contact Lastname" },
33: 
34: 	   { "required":1,"var":"register_password","type":"text","label":"Registration Password" },
35: 	 
36: 	   // *** HOW TO OVERRIDE _start ***
37: 	   // example1: variable starting points, user specified, no security, no validation.
38: 	   { "required":0, "type":"text", "var":"_start", "label":"This is a horrible idea." },
39: 	 
40: 	   // example2: using plain text passwords (poor security) 
41: 	   // for 'match/plain' - we have two passwords "TURTLE" and "LLAMA", both use the same starting points 'start-insecure'
42: 	   { "required":0, "type":"match", "if":"register_password", "is":"TURTLE", "var":"_start", "value":"start-insecure" },
43: 	   { "required":0, "type":"match", "if":"register_password", "is":"LLAMA" , "var":"_start", "value":"start-insecure" },
44: 	   
45: 	   // example3: using md5 digest for best security
46: 	   // for 'match-md5' - we will prepend the "saltedby" 'concatenateMe' with the users password 
47: 		// (which *MUST* not be stored in the file - but for this example it is 'KITTEN')
48: 	   // the md5 digest for 'concatenateMeKITTEN' is c3b9ba2823f9c2ba02a4ee89f8ac4450
49: 	   // since digests aren't reversible, they can be stored safely in public repos.
50: 	   { "required":0, "type":"match-md5", "if":"register_password", "saltedby":"concatenateMe", 
51: 							"is":"c3b9ba2823f9c2ba02a4ee89f8ac4450", "var":"_start", "value":"start-secure" },
52: 	   
53: 	],
54: }
55: </note>
56: </SECTION>
57: 
58: <SECTION>
59: <h1>API Usage</h1>
60: Jquery parameters are passed back and forth using a json hash containing 3 critical elements:
61: _uuid, _cartid, and either _cmd (for single commands) 
62: The API itself is designed to be asynchronous, however at this time only a synchronous responses are
63: available. 
64: 
65: *_uuid : a unique request id, this is passed back, and is used to identify duplicate requests.
66: *  _cartid : the unique cart id (cart id) for this cart, you will receive this after making a request if you do
67: not pass one, you must store this in the browser and pass it on subsequent requests.
68: * _cmd : a complete list of commands is passed below.  If _cmd is used then parameters to _cmd are passed in the
69: upper hash at the same level as _cmd.  If @cmds is used, then that is an array of hashes, each with their
70: own "_cmd" - the example below includes *both usages*, however you will only need to use one:
71: 
72: <CODE>
73: {
74: "_uuid" : 1234,
75: "_cartid" : "12345",
76: "_cmd" : "cartItemsAdd",
77: "_tag" : "some data you'd like returned",
78: "_v" : "unique mvc/app id (used for debugging)"
79:  }
80: </CODE>
81: </SECTION>
82: 
83: <SECTION>
84: <h1>Error Handling</h1>
85: handling errors is *critical* to a well behaved application, since there are literally hundreds of things
86: which can go wrong at any one time.  With each command (_cmd) request the Zoovy backend will return at a 
87: minimum: "rcmd", "rid", and "rmsg". 
88: The exact response format depends on how the request was made, if _cmd is used, then the response will 
89: include "rcmd" in the response, if @cmds was used, then both a top level "rcmd" indicating 
90: success/failure/ warnings of all commands, in addition to an array of hashes containing rcmds for
91: each individual request.
92: <CAUTION>
93: It is important when working with @cmds that you still check "rcmd" before looking at responses in 
94: @rcmds because based on the rcmd (ex: "ise") there may be no specific responses. 
95: </CAUTION>
96: 
97: * # : the unique request you sent in _uuid
98: * rcmd : the type of request you sent can be 'ise', or 'err'.
99: * if a fatal internal error if rcmd is 'ise', then an 'rid' (response error id) and 'rmsg') will be returned
100: * if 'rcmd' is 'err' then it's a formatting error that can be corrected.
101: 
102: A good rule of thumb is that an 'err' is 100% correctable by you, and an 'ise' *might* be correctable by you,
103: but it's probably on Zoovy's end.  (The example where an 'ise' might be correctable would include a non-
104: handled error on Zoovy's backend, if you fix the error the ise will go away). 
105: On a successful call the rcmd will be the same '_cmd' that was received, or 'ok' if '@cmds' was used.
106: <CAUTION>
107: *do not* check for the presence of 'errid' to determine if an error occurred. if '_rcmd' had a warning
108: (such as old call parameters) then errid and errmsg may also be returned, even though the request had
109: actually succeeded.
110: </CAUTION>
111: </SECTION>
112: 
113: <SECTION>
114: <h1>Pipelined Requests</h1>
115: 
116: Request:
117: <CODE>
118: {
119: "_cmd" : "pipeline",
120: "@cmds" : [
121:   { "_cmd" : "", .. other parameters .. }
122:   ],
123: }
124: </CODE>
125: Response:
126: <CODE>
127: {
128: "_rcmd" : "pipeline",
129: "@rcmds" : [
130: 	{ "_rcmd" : "", .. other parameters .. }
131: 	],
132: }
133: </CODE>
134: </SECTION>
135: 
136: <SECTION>
137: <h1>Errors</h1>
138: * rcmd 'ise', errid 1, request could not be processed.
139: * rcmd 'err', errid 2, errmsg Could not determine domain/associated site
140: * rcmd 'err', errid 3, errmsg Could not determine associated username
141: * rcmd 'err', errid 99, errmsg request did not deserialize properly
142: * rcmd 'err', errid 102,	errmsg Unknown _cartid parameter passed
143: * rcmd 'err',	errid	103,	errmsg No _cartid parameter passed
144: * rcmd 'err',	errid	104,	errmsg No _cmd parameter passed
145: * rcmd 'err',	errid	105,	errmsg Invalid _cmd parameter passed
146: * rcmd 'err',	errid	106,	errmsg Invalid inside _cmd parameter passed
147: * rcmd 'err', errid 107,  errmsg Unhandled else condition in _cmd @cmd detection
148: * rcmd 'err', errid 108,  errmsg No valid commands could be found, please check your formatting.
149: * rcmd 'err', errid 109,  errmsg A required parameter \"\" was not found or was blank
150: * rcmd 'err', errid 110,  errmsg A required parameter \"\" was set to \"\", allowed values (valid: x,y,z)
151: * rcmd 'err', errid 111,  errmsg Invalid or Corrupted Cart
152: * rcmd 'err', errid 123,  errmsg Cart Authentication is required to make this call
153: * rcmd 'err', errid 122,  errmsg Internal error in response from command stack.
154: * rcmd 'err', errid 149,  errmsg buyer login required.
155: * rcmd 'err', errid 150,  errmsg admin priviledges required.
156: * rcmd 'err', errid 151,  errmsg illegal parameter passed.
157: </SECTION>
158: 
159: <API id="helpSearch">
160: <input id="keywords"></input>
161: <output id="@RESULTS">
162: [ 'docid':'doc1', 'score':'52.533', 'title':'title of document 1', 'summary':'plain text summary' ]
163: [ 'docid':'doc2', 'score':'42.232', 'title':'title of document 2', 'summary':'plain text summary' ]
164: </output>
165: </API>
166: 
167: <API id="helpDocumentGet">
168: <input id="docid">documentid</input>
169: <output id="body">html document</output>
170: </API>
171: 
172: <API id="authAdminLogin">
173: <purpose>performs authentication and returns an admin session id which can be used to make adminXXXXX calls.</purpose>
174: <input id="device_note"></input>
175: <input id="ts" type="timestamp">current timestamp YYYYMMDDHHMMSS</input>
176: <input id="authtype" optional="1">md5|sha1|facebook|googleid|paypal</input>
177: <input id="authid" optional="1">for md5 or sha1 - it is a digest of hashtype(password+ts)</input>
178: 
179: <hint>
180: userid identifies a user (not a domain) within a specific account. A single user may have access to many partitions and many domains. There are
181: several valid ways to write a user.  Each account is assigned a 20 character "username", in addition there is a 10 digit sub-user called the "luser". 
182: the security administrator for every account is called "admin" and so the login for admin would be "admin*username" or simply "username" in addition
183: if a domain.com is associated to an account then it is also allowed to login as admin@domain.com.  The same applies for luser which would simply be 
184: luser*username or luser@domain.com.  Please note that login id's are NOT the same as email addresses, it is not possible to login with an email address
185: unless the users email address also happens to be luser@domain.com (which would be configured by security administrator)
186: </hint>
187: 
188: <hint>
189: authentication information (USERID, CLIENTID, DOMAIN, VERSION, AUTHTOKEN) can be passed in either of two ways - using HTTP Headers, or in the data payload.
190: The following is a mapping of HTTP Header to payload parameter.   X-USERID = _userid, X-DOMAIN = _domain, X-VERSION = _version, X-CLIENTID = _clientid,
191: X-DEVICEID = _deviceid, X-AUTHTOKEN = _authtoken.  Avoid using HTTP headers when making requests via the XHR XMLHTTPRequest from a browser, there are
192: numerous compatibility issues with the CORS (Cross Origin Resource Sharing) specification 2119 so use the payload version instead. Ex:
193: { "_cmd":"someThing", "_clientid":"your client id", "_version":201249, } 
194: </hint>
195: 
196: <hint>
197: authAdminLogin calls do not require an authtoken (since they return it), depending on the circumstances the api may return a challenge 
198: which complies with the supported challenge methods. The list of acceptable challenge methods is determined by comparing the allowed challenge 
199: methods of the client (which were specified when the clientid was requested/assigned) and also the challenge types allowed by the administrator -
200: if no mutually acceptable challenge types can be identified then an error is returned and access is denied.  Challenges are issued based on the
201: accounts security administrator settings. 
202: </hint>
203: 
204: <hint>
205: authtype of md5|sha1 refers to the digest protocol being used (in all cases we will accept the hexadecimal notation)
206: the authid is generated by computing the md5 or sha1 hexadecimal digest value of the concatenation of plain_text_password and ts .
207: Given the following inputs password="A", ts="1B" then it would be md5("A1B") or sha1("A1B") respectively.
208: Both MD5 and SHA1 are widely implemented protocols and sufficiently secure for this exercise - 
209: we have included the appropriate security tokens as generated by the md5 and sha1 functions in 
210: mysql below (use these as a reference to test your own functions)
211: 
212: mysql> select md5('A1B');
213: +----------------------------------+
214: | md5('A1B')                       |
215: +----------------------------------+
216: | 9c8c7d6da17f5b90b9c2b8aa03812ab4 |
217: +----------------------------------+
218: 
219: mysql> select sha1('A1B');
220: +------------------------------------------+
221: | sha1('A1B')                              |
222: +------------------------------------------+
223: | 7b6bfc9420addb09c8cfb1ae5f71f8e797d4685d |
224: +------------------------------------------+
225: 
226: The ts value of "1B" would not be valid, it should be a date in YYYYMMDDHHMMSS format. 
227: The date must be within 60 seconds of the actual time or the request will be refused. 
228: In addition the random security string is ONLY valid for one request within a 1 hour period.
229: </hint>
230: 
231: <response id="authtoken">secret user key</response>
232: <response id="deviceid">deviceid</response>
233: <response id="userid">userid</response>
234: <response id="ts"></response>
235: 
236: 
237: <example>
238: X-USERID: user@domain.com
239: X-CLIENT: your.app.client.id
240: X-VERSION: 201246
241: X-DEVICEID: user_specified
242: X-DOMAIN: domain.com
243: Content-Type: application/json
244: 
245: { "_cmd":"authAdminLogin", "ts":"YYYYMMDDHHMMSS or seconds since 1970", "authtype":"md5", "authid"  }
246: </example>
247: 
248: </API>
249: 
250: 
251: 
252: <API id="authNewAccountCreate">
253: <purpose>
254: establish a new anycommerce account (this data should be collected during the registration process)
255: </purpose>
256: <input id="domain"></input>
257: <input id="email"></input>
258: <input id="firstname"></input>
259: <input id="lastname"></input>
260: <input id="company"></input>
261: <input id="phone"></input>
262: <input id="verification">sms|voice</input>
263: <notes>returns a valid token to the account</notes>
264: <response id="ts">timestamp</response>
265: <response id="userid">login@username</response>
266: <response id="deviceid">login@username</response>
267: <response id="authtoken">login@username</response>
268: </API>
269: 
270: <SECTION>
271: <h1>MashUps</h1>
272: MashUps are used to send/receive data with "external systems" via a variety of protocols including:
273: SQS, SQL, HTTP, HTTPS, MemCache, Rredis, SMTP, FTP, or SFTP.
274: 
275: MashUps require platform/ action files to do anything, and the specific action must be specified in the api call.
276: The action file is a json configuration file included with the application that specifies which data to send, 
277: and what to do with the response.  
278: 
279: Because the contents of platform/actions files are controlled by the developer they are an easy and useful way
280: to communicate with 3rd party "trusted" systems and provide escalated permissions.
281: 
282: There are many mashup code patterns, and designs can contain a lot, or a little security - as dictated by the 
283: business requirements and role of the response.   
284: 
285: Examples: 
286: 1. A simple mashup which uses no authentication might be an HTTP call to an external node.js hosted application that
287: displays the "deal of the day" and optionally includes a coupon/or special code to discount that item.
288: 
289: 2. A more complicated example might be interact with a 3rd party customer login/authentication system, where 
290: bidirectional information is passed back and forth creating a secure three way handshake between the app, the platform,
291: and the authentication system.
292: 
293: Mashup services can be hosted anywhere in the cloud. Examples might include Google AppEngine, Amazon EC2, or 
294: Heroku are all frequently used. 
295: 
296: Action files may specify call limits on a per session basis (ex: only one deal per session per hour), and call limits 
297: (and of course session limits) will be enforced by the platform -- thereby eliminating the opportunity for abusive 
298: behavior and reducing the planning complexity of deploying the mashup.
299: 
300: Mashup authentication can be none (public), private (obscured uri), secured via secret password/key/token, 
301: or with some protocols use PKI client certificates for the highest level of security.
302: 
303: Some Mashup protocols are one way (ex: SMTP), some have high latency (ex: FTP) and use notifications/messaging when
304: data is available, and finally some are bi-directional. 
305: Payload input and output are identical across protocols.
306: However Request/Response formatting is designed to be familiar across protocols, but obviously intended to utilize the
307: specifics.
308: 
309: </SECTION>
310: 
311: <API id="appMashUpSQS">
312: <concept>mashup</concept>
313: <purpose></purpose>
314: <notes></notes>
315: </API>
316: 
317: <API id="appMashUpSQL">
318: <concept>mashup</concept>
319: <purpose></purpose>
320: <notes></notes>
321: </API>
322: 
323: <API id="appMashUpHTTP">
324: <concept>mashup</concept>
325: <purpose></purpose>
326: <notes></notes>
327: </API>
328: 
329: <API id="appMashUpHTTPS">
330: <concept>mashup</concept>
331: <purpose></purpose>
332: <notes></notes>
333: </API>
334: 
335: <API id="appMashUpMemCache">
336: <concept>mashup</concept>
337: <purpose></purpose>
338: <notes></notes>
339: </API>
340: 
341: <API id="appMashUpRedis">
342: <concept>mashup</concept>
343: <purpose></purpose>
344: <notes></notes>
345: </API>
346: 
347: <API id="appMashUpSMTP">
348: <concept>mashup</concept>
349: <purpose></purpose>
350: <notes></notes>
351: <input id="permission">.mashups/smtp-sample.json</input>
352: <input id="sender" optional="1"></input>
353: <input id="recipient" optional="1"></input>
354: <input id="subject" optional="1"></input>
355: <input id="body"></input>
356: <example id=".mashups/smtp-sample.json">
357: {
358: 	"call":"appMashUpSMTP",			/* required */
359: 	"call-limit-daily":"10",		/* recommended: max of 10 calls per day */
360: 	"call-limit-hourly":"2",		/* recommended: max of 2 calls per hour */
361: 	"min-version":201338,			/* recommended: minimum api version */
362: 	"max-version":201346,			/* recommended: maximum api version */
363: 	"@whitelist":[
364: 		/* the line below will force the sender to you@domain.com */
365: 		{ "id":"sender",    "verb":"set", "value":"you@domain.com" },
366: 		/* the line above will use the recipient provided in the app call */
367: 		{ "id":"recipient", "verb":"get" },
368: 		/* this is an optional parameter, provided by the app, defaulting to "unknown" */
369: 		{ "id":"eyecolor",  "verb":"get", "default":"unknown" },
370: 		/* the default behavior is "verb":"get" .. so this is basically whitelisting subject */
371: 		{ "id":"subject"    },
372: 		/* the body message, which will substitute %eyecolor% */
373: 		{ "id":"body", 	  "verb":"sub", "value":"Your eye color is: %eyecolor%" }
374: 		]
375: }
376: </example>
377: </API>
378: 
379: <API id="appMashUpFTP">
380: <concept>mashup</concept>
381: <purpose></purpose>
382: <notes></notes>
383: </API>
384: 
385: <API id="appMashUpSFTP">
386: <concept>mashup</concept>
387: <purpose></purpose>
388: <notes></notes>
389: </API>
390: 
391: <API id="appInteractInternalMemCache">
392: <concept>mashup</concept>
393: <purpose></purpose>
394: <notes></notes>
395: </API>
396: 
397: <API id="appInteractInternalRedis">
398: <concept>mashup</concept>
399: <purpose></purpose>
400: <notes></notes>
401: </API>
402: 
403: <API id="authAdminLogout">
404: <purpose>destroy/invalidate an admin session.</purpose>
405: <notes>
406: Does not need any parameters, destroys the current session (if any), always returns a success.
407: </notes>
408: </API>
409: 
410: <API id="authPasswordRecover">
411: <purpose>employs the password recovery mechanism for the account (currently only email)</purpose>
412: <input id="session">random session id (32 character)</input>
413: <input id="ts">timestamp</input>
414: <response id="userkey">secret user key</response>
415: <response id="ts">current time</response>
416: </API>
417: 
418: <API id="adminPlatformMacro">
419: </API>
420: 
421: <API id="adminPlatformHealth">
422: </API>
423: 
424: <API id="adminPlatformLogList">
425: </API>
426: 
427: <API id="adminPlatformLogDownload">
428: <input id="GUID"></input>
429: </API>
430: 
431: 
432: <API id="adminPlatformQueueList">
433: </API>
434: 
435: <API id="adminDataQuery">
436: <purpose>accesses local management database for a variety of fields/reports</purpose>
437: <input id="query">
438: 	listing-active,listing-active-fixed,listing-active-store,listing-active-auction,listing-all,listing-allwattempts,
439: 	event-warnings,event-success,event-pending,event-target-powr.auction,event-target-ebay.auction,event-target-ebay.fixed
440: </input>
441: <input id="since_gmt">epoch timestamp - returns all data since that time</input>
442: <input id="batchid">batchid (only valid with event- requests)</input>
443: <output id="@HEADER"></output>
444: <output id="@ROWS"></output>
445: <acl want="EBAY">
446: </acl>
447: </API>
448: 
449: <API id="adminOrderSearch">
450: <purpose>returns a list of orders based on the results of an elastic search</purpose>
451: <input id="ELASTIC">elastic search parameters</input>
452: <input id="DETAIL" optional="1">1,3,5</input>
453: <input id="DEBUG"></input>
454: </API>
455: 
456: 
457: <API id="adminOrderList">
458: <purpose>returns a list of orders based on one or more filter criteria</purpose>
459: <input id="_admin" required="1">admin session id</input>
460: <input id="TS" optional="1">modified since timestamp</input>
461: <input id="EREFID" optional="1">string (external reference id)</input>
462: <input id="CUSTOMER" optional="1">#CID</input>
463: <input id="DETAIL" optional="1">1,3,5</input>
464: <input id="POOL" optional="1">RECENT,PENDING,PROCESSING</input>
465: <input id="PRT" optional="1">0</input>
466: <input id="BILL_FULLNAME" optional="1">string</input>
467: <input id="BILL_EMAIL" optional="1">string</input>
468: <input id="BILL_PHONE" optional="1">string</input>
469: <input id="SHIP_FULLNAME" optional="1">string</input>
470: <input id="CREATED_GMT" optional="1">#epoch</input>
471: <input id="CREATEDTILL_GMT" optional="1">#epoch</input>
472: <input id="PAID_GMT" optional="1">#epoch</input>
473: <input id="PAIDTILL_GMT" optional="1">#epoch</input>
474: <input id="PAYMENT_STATUS" optional="1">001</input>
475: <input id="SHIPPED_GMT" optional="1">1/0</input>
476: <input id="NEEDS_SYNC" optional="1">1/0</input>
477: <input id="MKT" optional="1">EBY,AMZ</input>
478: <input id="LIMIT" optional="1">#int (records returned)</input>
479: <caution>
480: maximum number of records returned is 1,000
481: </caution>
482: <response id="@orders">an array of orders containing varied amounts of data based on the detail level requested</response>
483: <example title="response with DETAIL:1">
484: <![CDATA[
485: @orders:[
486: 	[ 'ORDERID':'2012-01-1234', 'MODIFIED_GMT':123456 ],
487: 	[ 'ORDERID':'2012-01-1235', 'MODIFIED_GMT':123457 ],
488: 	[ 'ORDERID':'2012-01-1236', 'MODIFIED_GMT':123458 ]
489: 	]
490: ]]></example>
491: <note>
492: Detail level 3 includes POOL, CREATED_GMT
493: Detail level 5 includes CUSTOMER ID, ORDER_BILL_NAME, ORDER_BILL_EMAIL, ORDER_BILL_ZONE, ORDER_PAYMENT_STATUS, ORDER_PAYMENT_METHOD, ORDER_TOTAL, ORDER_SPECIAL, MKT, MKT_BITSTR
494: </note>
495: </API>
496: 
497: <API id="adminOrderDetail">
498: <purpose>provides a full dump of data inside an order</purpose>
499: <input id="_cartid" required="1">admin session id</input>
500: <input id="orderid" required="1">Order ID</input>
501: <response id="order">a json representation of an order (exact fields depend on version/order source)</response>
502: </API>
503: 
504: <API id="adminOrderDetail">
505: <purpose>provides a full dump of data inside an order</purpose>
506: <input id="_cartid" required="1">admin session id</input>
507: <input id="orderid" required="1">Order ID</input>
508: <response id="order">a json representation of an order (exact fields depend on version/order source)</response>
509: </API>
510: 
511: <API id="adminOrderMacro">
512: <purpose>uses the embedded macro language to set order parameters, depending on access levels macros may not be available.</purpose>
513: <input id="orderid" required="1">order id of the order# to update</input>
514: <input id="@updates" required="1">macro content
515: </input>
516: <example>
517: <![CDATA[
518: 
519: @updates:[
520: 	'cmd',
521: 	'cmd?some=param',
522: 	]
523: 
524: ]]>
525: </example>
526: <hint>
527: <![CDATA[
528: 
529: **Using Order Macros (@updates)**
530: 
531: Order Macros provide a developer with a way to make easy, incremental, non-destructive updates to orders. 
532: The syntax for a macro payload uses a familiar dsn format cmd?key=value&key=value, along with the same
533: uri encoding rules, and one command per line (making the files very easy to read) -- here is an example:
534: "SETPOOL?pool=COMPLETED" (without the quotes). A complete list of available commands is below:
535: 
536: * CREATE
537: * SETPOOL?pool=[pool]\n
538: * CAPTURE?amount=[amount]\n
539: * ADDTRACKING?carrier=[UPS|FDX]&track=[1234]\n
540: * EMAIL?msg=[msgname]\n
541: * ADDPUBLICNOTE?note=[note]\n
542: * ADDPRIVATENOTE?note=[note]\n
543: * ADDCUSTOMERNOTE?note=[note]\n
544: * SET?key=value	 (for setting attributes)
545: * SPLITORDER
546: * MERGEORDER?oid=src orderid
547: * ADDPAYMENT?tender=CREDIT&amt=0.20&UUID=&ts=&note=&CC=&CY=&CI=&amt=
548: * ADDPROCESSPAYMENT?VERB=&same_params_as_addpayment<br>
549: 	NOTE: unlike 'ADDPAYMENT' the 'ADDPROCESSPAYMENT' this will add then run the specified verb.
550: 	Verbs are: 'INIT' the payment as if it had been entered by the buyer at checkout,
551: 	other verbs: AUTHORIZE|CAPTURE|CHARGE|VOID|REFUND
552: * PROCESSPAYMENT?VERB=verb&UUID=uuid&amt=<br>
553: 	Possible verbs: AUTHORIZE|CAPTURE|CHARGE|VOID|REFUND
554: * SETSHIPADDR?ship/company=&ship/firstname=&ship/lastname=&ship/phone=&ship/address1=&ship/address2=&ship/city=&ship/country=&ship/email=&ship/state=&ship/province=&ship/zip=&ship/int_zip=
555: * SETBILLADDR?bill/company=&bill/firstname=&bill/lastname=&bill/phone=&bill/address1=&bill/address2=&bill/city=&bill/country=&bill/email=&bill/state=&bill/province=&bill/zip=&bill/int_zip=
556: * SETSHIPPING?shp_total=&shp_taxable=&shp_carrier=&hnd_total=&hnd_taxable=&ins_total=&ins_taxable=&spc_total=&spc_taxable=
557: * SETADDRS?any=attribute&anyother=attribute
558: * SETTAX?sum/tax_method=&sum/tax_total&sum/tax_rate_state=&sum/tax_rate_zone=&
559: * SETSTUFFXML?xml=encodedstuffxml
560: * ITEMADD?uuid=&sku=xyz&
561: * ITEMREMOVE?uuid=
562: * ITEMUPDATE?uuid=&qty=&price=&
563: * SAVE
564: * ECHO
565: 
566: ]]>
567: </hint>
568: </API>
569: 
570: <API id="adminOrderPaymentAction">
571: <purpose>interally runs the PAYMENTACTION orderUpdate Macro, but can be called as a separate API</purpose>
572: <response id="orderid"> 2011-01-1234</response>
573: <response id="payment"> </response>
574: 
575: </API>
576: 
577: <API id="adminImageDetail">
578: <purpose>returns stored details about an media library image file.</purpose>
579: <input id="file" example="path/to/image.jpg">filename of the image</input>
580: <response id="FILENAME"></response>
581: <response id="EXT"></response>
582: <response id="H"></response>
583: <response id="W"></response>
584: <response id="SIZE"></response>
585: <response id="TS"></response>
586: <response id="FID"></response>
587: </API>
588: 
589: <API id="adminImageFolderList">
590: <purpose>returns a list of image categories and timestamps for each category</purpose>
591: <response id="@folders"></response>
592: <example>
593: <![CDATA[
594: <Folder ImageCount="5" TS="123" Name="Path1" FID="1" ParentFID="0" ParentName="|"/>
595: <Folder ImageCount="2" TS="456" Name="Path1b" FID="2" ParentFID="1" ParentName="|Path1"/>
596: <Folder ImageCount="1" TS="567" Name="Path1bI" FID="3" ParentFID="2" ParentName="|Path1|Pathb"/>
597: <Folder ImageCount="0" TS="789" Name="Path2" FID="4" ParentFID="0" ParentName="|"/>
598: ]]>
599: </example>
600: </API>
601: 
602: 
603: <API id="adminImageList">
604: <purpose>returns the list of images for a given folder (if specified). </purpose>
605: <input id="folder">folder to view</input>
606: <input id="reindex">if a folder is requested, this will reindex the current folder</input>
607: <input id="keyword">keyword (uses case insensitive substring)</input>
608: <input id="orderby">NONE|TS|TS_DESC|NAME|NAME_DESC|DISKSIZE|DISKSIZE_DESC|PIXEL|PIXEL_DESC</input>
609: <input id="detail">NONE|FOLDER</input>
610: <response id="@images"></response>
611: <example>
612: <![CDATA[
613: <Image Name="abc" TS="1234" Format="jpg" />
614: <Image Name="abc2" TS="1234" Format="jpg" />
615: <Image Name="abc3" TS="1234" Format="jpg" />
616: <Image Name="abc4" TS="1234" Format="jpg" />
617: <Image Name="abc5" TS="1234" Format="jpg" />
618: ]]>
619: </example>
620: </API>
621: 
622: <API id="adminImageFolderCreate">
623: <purpose>creates a new folder in the media library, folder names must be in lower case.</purpose>
624: <input id="folder">DIR1|DIR2</input>
625: <response id="fid">the internal folder id#</response>
626: <response id="name">the name the folder was created</response>
627: <hint>you can call these in any order, subpaths will be created.</hint>
628: <example>
629: <![CDATA[
630: <Category FID="1234" Name=""/>
631: ]]>
632: </example>
633: </API>
634: 
635: <API id="adminImageFolderDelete">
636: <purpose>request the deletion of a category (do not implement this right now)</purpose>
637: <input id="folder"></input>
638: </API>
639: 
640: <API id="adminImageUpload">
641: <purpose>uses the file upload api to link a fileguid into a media library directory.</purpose>
642: <input id="folder">folder</input>
643: <input id="filename"></input>
644: <input optional="1" id="base64">base64 encoded image data</input>
645: <input optional="1" id="fileguid">fileguid (from file upload)</input>
646: </API>
647: 
648: <API id="adminImageDelete">
649: <purpose>deletes an image</purpose>
650: <input id="file">filename</input>
651: <input id="folder">folder</input>
652: </API>
653: 
654: <API id="adminSupplierList">
655: <purpose></purpose>
656: <concept>supplier</concept>
657: </API>
658: 
659: 
660: <API id="adminSupplierMacro">
661: <purpose></purpose>
662: <concept>supplier</concept>
663: </API>
664: 
665: <API id="adminSupplierCreate">
666: <purpose></purpose>
667: <concept>supplier</concept>
668: </API>
669: 
670: <API id="adminSupplierDetail">
671: <purpose></purpose>
672: <concept>supplier</concept>
673: <input id="VENDORID">6-8 digit supplier/vendor id</input>
674: </API>
675: 
676: <API id="adminSupplierRemove">
677: <purpose></purpose>
678: <concept>supplier</concept>
679: <input id="VENDORID">6-8 digit supplier/vendor id</input>
680: <input id="products">0|1</input>
681: </API>
682: 
683: <API id="adminSupplierOrderList">
684: <purpose></purpose>
685: <concept>supplier</concept>
686: <input id="VENDORID">6-8 digit supplier/vendor id</input>
687: <input id="FILTER" required="1">UNCONFIRMED|RECENT</input>
688: <input id="FILTER=UNCONFIRMED" optional="1">The last 300 non corrupt/non error orders which have no confirmed timestamp</input>
689: <input id="FILTER=RECENT" optional="1">The last 100 unarchived orders</input>
690: <input id="DETAIL" required="1">1|0 includes an optional @ORDERDETAIL in response</input>
691: <output id="@ORDERS">detail about the vendor/supplier orders</output>
692: <output id="@ORDERDETAIL"></output>
693: </API>
694: 
695: <API id="adminSupplierOrderItemList">
696: <purpose></purpose>
697: <concept>supplier</concept>
698: <input id="FILTER" required="1">OPEN</input>
699: </API>
700: 
701: <API id="adminSupplierProductList">
702: <purpose></purpose>
703: <concept>supplier|product</concept>
704: </API>
705: 
706: 
707: 
708: <API id="adminPrivateFileDownload">
709: <purpose></purpose>
710: <concept>report</concept>
711: <input id="GUID"></input>
712: </API>
713: 
714: <API id="adminPrivateFileList">
715: <purpose></purpose>
716: <concept>report</concept>
717: <input optional="1" id="type"></input>
718: <input optional="1" id="guid"></input>
719: <input optional="1" id="active"></input>
720: <input optional="1" id="keyword"></input>
721: <input optional="1" id="limit"></input>
722: </API>
723: 
724: <API id="adminReportDownload">
725: <purpose>
726: <![CDATA[
727: Inside "$R" (the REPORT object) there are following output values:
728: @HEAD the header object (below)
729: @BODY the body object (further below)
730: 
731: 	that is all that is *required* @DASHBOARDS and @GRAPHS are discussed later.
732: 
733: 
734: 	@HEAD is an array, of "header columns" structured as such:
735: 		[
736: 		'name'=>'Name of Column',
737: 		'type'=>  	NUM=numeric,  CHR=character, ACT=VERB (e.g. button), 
738: 						LINK=http://www.somelink.com
739: 						ROW (causes the contents to placed in it's own row e.g. a detail summary)
740: 					(see specialty types below)
741: 		'pre'=>	?? pretext
742: 		'post'=> ?? posttext
743: 		],
744: 
745:  
746: 	@BODY is an array of arrays 
747: 		the array is re-ordered based on the current sort (and then re-saved)
748: 		[
749: 			[ 'abc','1','2','3' ],
750: 			[ 'def','4','5','6' ]
751: 		]
752: 
753: 	@SUMMARY = [
754: 		{ type=>'BREAK,CNT,SUM,AVG', src=>col#, sprintf=>"formatstr" },
755: 		{ type=>'BREAK,CNT,SUM,AVG', src=>col#, sprintf=>"formatstr" },
756: 		]
757: 
758: 	@DASHBOARD = [
759: 		{ 
760: 			title=>'', subtitle=>'', groupby=>col#, 
761: 			@HEAD=>[ 
762: 				{ type=>'NUM|CHR|VAL|SUM|AVG|TOP|LOW|CNT', name=>'name of column', src=col# }
763: 				{ type=>'NUM|CHR|VAL|SUM|AVG|TOP|LOW|CNT', name=>'name of column', src=col# }
764: 				],
765: 			@GRAPHS=>[ 'file1', 'file2', 'file3' ]
766: 		}, 
767: 		{ 
768: 			title=>'', subtitle=>'', groupby=>col#, 
769: 			@HEAD=>[ 
770: 				{ type=>'NUM|CHR|VAL|SUM|AVG|TOP|LOW|CNT', name=>'name of column', src=col# }
771: 				{ type=>'NUM|CHR|VAL|SUM|AVG|TOP|LOW|CNT', name=>'name of column', src=col# }
772: 				],
773: 			@GRAPHS=>[ 'file1', 'file2', 'file3' ]
774: 		}, 
775: 		]
776: 
777: specialty column types: ==
778: 	YJH - Year/JulianDay/Hour
779: 	YJJ - Year/JulianDay
780: 	YWK - Year/Week
781:  	YMN - Year/Month
782: 	YDT - takes a gmt time and returns the pretty date
783: 	YDU - how many days/hours/minutes/seconds the duration is
784: 
785: 	NUM=numeric
786: 	CHR=character
787: 	ACT=VERB (e.g. button) "<input type=\"button\" value=\"Start Dispute\" class=\"button2\" onClick=\"customAction('OPEN','$claim');\">";
788: 	ROW 
789: ]]>
790: </purpose>
791: <concept>report</concept>
792: <input id="GUID">the globally unique id assigned to this report (probably obtained from a batch job list)</input>
793: </API>
794: 
795: <API id="adminNavTreeList">
796: <output id="@NAVS">
797: a list of nav elements
798: [
799: {	"type":"navcat", "prt":"0", "nav":"PRT000", "title":"Partition 0"  },
800: {	"type":"navcat", "prt":"1", "nav":"PRT001", "title":"Partition 1"  },
801: ]
802: </output>
803: </API>
804: 
805: <API id="appCategoryDetail">
806: <purpose></purpose>
807: <input id="safe">.safe.path</input>
808: <input id="detail">fast|more|max</input>
809: <input hint="detail:max only" id="depth">#changes pretty from "Category C" to "Category A / Category B / Category C", 0 = no breadcrumbs</input>
810: <input hint="detail:max only" id="delimiter">xyz the separator between category names in the breadcrumb (default " / ")</input>
811: <note>skips hidden categories</note>
812: <response id="exists">1|0</response>
813: <response id="pretty"></response>
814: <response id="sort"></response>
815: <response id="%meta">[ "dst":"value", "dst":"value" ]</response>
816: <response id="@products">[pid1,pid2,pid3]</response>
817: <note>detail=fast is the same as detail=more</note>
818: <response id="subcategoryCount"># of children</response>
819: <response id="@subcategories">[ '.safe.sub1', 'safe.sub2', '.safe.sub3' ];</response>
820: <input id="@subcategoryDetail" hint="detail:more or detail:max">
821: 	[
822: 	[ 'id':'.safe.sub1', 'pretty':'Sub Category 1', '@products':['pid1','pid2','pid3'] ],
823: 	[ 'id':'.safe.sub2', 'pretty':'Sub Category 2', '@products':['pid1','pid2','pid3'] ],
824: 	];
825: </input>
826: <errors>
827: 	<err id="8001" type="warning">Requested Category does not exist.</err>
828: </errors>
829: 
830: </API>
831: 
832: <API id="adminNavcatDetail">
833: <purpose>returns detailed information about a navigation category or product list.</purpose>\
834: <input optional="1" id="prt">returns the navigation for partition</input>
835: <input optional="1" id="navtree">returns the navigation for navtree specified (use the navtree parameter from adminNavTreeList)</input>
836: <concept>navcat</concept>
837: <output>
838: path:.safe.name or path:$listname
839: returns:
840: pretty:'some pretty name',
841: @products:['pid1','pid2','pid3'],
842: %meta:['prop1':'data1','prop2':'data2']
843: </output>
844: </API>
845: 
846: <API id="appNavcatDetail">
847: <purpose>see adminNavcatDetail (identical)</purpose>
848: </API>
849: 
850: <API id="adminNavcatDelete">
851: <purpose>permanently removes a navigation category or list.</purpose>
852: <concept>navcat</concept>
853: <input id="path">.safe.name or path:$listname</input>
854: </API>
855: 
856: <API id="adminNavcatModify">
857: <purpose>changes the pretty name of a navigation category or list</purpose>
858: <concept>navcat</concept>
859: <input id="path">.safe.name or path:$listname</input>
860: <input id="pretty">new name for category</input>
861: <hint>
862: will support %meta tags in the future.
863: </hint>
864: </API>
865: 
866: <API id="adminNavcatCreate">
867: <purpose>Creates a new navigation category or product list with a given pretty name.</purpose>
868: <concept>navcat</concept>
869: <input id="pretty">new name for category</input>
870: <input id="root">.root.category (set to $ for list)</input>
871: </API>
872: 
873: <API id="adminNavcatProductInsert">
874: <purpose>adds a single product to a navigation category or list.</purpose>
875: <input id="path">.root.category or $list</input>
876: <input id="pid">pid1</input>
877: <input id="position"># (0=first element in the list, -1=last element in the list)</input>
878: </API>
879: 
880: <API id="adminNavcatProductDelete">
881: <purpose>removes a single product from a navigation category or list.</purpose>
882: <input id="path">.root.category or $list</input>
883: <input id="pid">pid1</input>
884: </API>
885: 
886: <API id="adminProductList">
887: <purpose>accesses the product database to return a specific hardcoded list of products</purpose>
888: <input id="CREATED_BEFORE">modified since timestamp</input>
889: <input id="CREATED_SINCE">modified since timestamp</input>
890: <input id="SUPPLIER">supplier id</input>
891: <hint>
892: indexed attributes: zoovy:prod_id,zoovy:prod_name,
893: zoovy:prod_supplierid,  zoovy:prod_salesrank, zoovy:prod_mfgid,
894: zoovy:prod_upc, zoovy:profile
895: </hint>
896: </API>
897: 
898: <API id="adminProductSelectorDetail">
899: <purpose>a product selector is a relative pointer to a grouping of products.</purpose>
900: <concept>product</concept>
901: <input id="selector">
902: NAVCAT=.safe.path
903: NAVCAT=$list
904: CSV=pid1,pid2,pid3
905: CREATED=YYYYMMDD|YYYYMMDD
906: RANGE=pid1|pid2
907: MANAGECAT=/path/to/category
908: SEARCH=saerchterm
909: PROFILE=xyz
910: SUPPLIER=xyz
911: MFG=xyx
912: ALL=your_base_are_belong_to_us
913: </input>
914: <output id="@products">an array of product id's</output>
915: </API>
916: 
917: 
918: 
919: 
920: <API id="adminProductDelete">
921: <purpose>removes a product id (and all variations) from the database</purpose>
922: <concept>product</concept>
923: <input id="pid">pid : an A-Z|0-9|-|_ -- max length 20 characters, case insensitive</input>
924: </API>
925: 
926: <API id="adminProductCreate">
927: <purpose>creates a new product in the database</purpose>
928: <concept>product</concept>
929: <input id="pid">pid : an A-Z|0-9|-|_ -- max length 20 characters, case insensitive</input>
930: <input id="%attribs">[ 'zoovy:prod_name':'value' ]</input>
931: <example>
932: %attribs:[ 'zoovy:prod_name':'value' ]
933: </example>
934: </API>
935: 
936: <API id="adminProductUpdate">
937: <purpose></purpose>
938: <input id="pid">pid : an A-Z|0-9|-|_ -- max length 20 characters, case insensitive</input>
939: <input id="%attribs">[ 'attribute':'value', 'anotherattrib':'value' ]</input>
940: <example>
941: %attribs:[ 'attribute':'value', 'anotherattrib':'value' ]
942: </example>
943: </API>
944: 
945: <API id="adminProductDetail">
946: <purpose></purpose>
947: <input id="pid">pid1</input>
948: <output id="%attribs">
949: </output>
950: <output id="@skus">
951: @skus = [
952:   { 'sku':'sku1', '%attribs':{ key1a:val1a, key1b:val1b } },
953:   { 'sku':'sku2', '%attribs':{ key2b:val2a, key2b:val2b } }
954:   ]
955: </output>
956: </API>
957: 
958: <API id="adminProductDebugLog">
959: <purpose>see reports for @HEAD,@BODY format</purpose>
960: <input id="pid">pid1</input>
961: <input id="GUID"></input>
962: <output id="@HEAD"></output>
963: <output id="@BODY"></output>
964: </API>
965: 
966: <API id="adminProductEBAYDetail">
967: </API>
968: 
969: <API id="adminProductAmazonDetail">
970: <output id="%thesaurus"></output>
971: <output id="@DETAIL"></output>
972: </API>
973: 
974: <API id="adminProductAmazonVerify">
975: <output id="@MSGS"></output>
976: <note>
977: TITLE|SUCCESS|INFO|WARN|STOP|PAUSE|ERROR|DEPRECATION|DEBUG|XML
978: </note>
979: </API>
980: 
981: <API id="adminProductBUYDetail">
982: <input id="pid">pid1</input>
983: <output id="@DBMAPS"></output>
984: <output id="buycom/dbmap"></output>
985: <output id="%FLEX"></output>
986: </API>
987: 
988: 
989: <API id="adminProductOptionsUpdate">
990: <input id="pid">pid1</input>
991: <input id="@pogs">an array of pog options</input>
992: </API>
993: 
994: <API id="adminProductEventsDetail">
995: <input id="pid">pid1</input>
996: </API>
997: 
998: <API id="adminProductMacro">
999: <purpose></purpose>
1000: <input id="pid">pid1</input>
1001: <input id="@updates"></input>
1002: </API>
1003: 
1004: <API id="adminTaskList">
1005: <purpose></purpose>
1006: sort=id
1007: class=
1008: </API>
1009: 
1010: <API id="adminTaskCreate">
1011: <purpose></purpose>
1012: class=INFO|WARN|ERROR|SETUP|TODO
1013: class=>"INFO|WARN|ERROR|SETUP|TODO",		## SETUP = setup tasks, TODO=user created.
1014: title=>"100 character short message",
1015: detail=>"long description",
1016: errcode=>"AMZ#1234,EBAY#1234,",		## see %TODO::CODES below
1017: dstcode=>"GOO", ## check SYNDICATION.pm for dstcodes
1018: link=>"order:####-##-###|product:ABC|ticket:1234", 
1019: 		or: ticket=>$ticketid, order=>$oid, pid=>$pid,		## this is preferred because it will set other fields.
1020: guid=>$related_private_file_guid|$bj->guid(),
1021: priority=>1|2|3		## you don't need to set this unless you want to override 1=high,2=warn,3=error
1022: group=>		## another way of referencing errcode.
1023: panel=>		## the name of the panel which contains a tutorial video (for SETUP tasks)
1024: </API>
1025: 
1026: <API id="adminTaskRemove">
1027: <purpose></purpose>
1028: taskid 
1029: pid+dstcode
1030: class+panel
1031: class+group
1032: class
1033: 
1034: </API>
1035: 
1036: <API id="adminTaskUpdate">
1037: <purpose></purpose>
1038: </API>
1039: 
1040: <API id="adminTaskDetail">
1041: <purpose></purpose>
1042: </API>
1043: 
1044: <API id="adminTaskComplete">
1045: <purpose></purpose>
1046: </API>
1047: 
1048: <API id="adminTicketList">
1049: <purpose></purpose>
1050: <input id="detail" required="1">open|all|projects|waiting</input>
1051: <output id="@FILES"></output>
1052: </API>
1053: 
1054: <API id="adminTicketCreate">
1055: <purpose></purpose>
1056: <input id="disposition"></input>
1057: <input id="body"></input>
1058: <input id="subject"></input>
1059: <input id="callback"></input>
1060: <input id="private"></input>
1061: <input id="priority"></input>
1062: </API>
1063: 
1064: <API id="adminTicketMacro">
1065: <purpose></purpose>
1066: Not finished
1067: </API>
1068: 
1069: <API id="adminTicketDetail">
1070: <purpose></purpose>
1071: Not finished
1072: </API>
1073: 
1074: <API id="adminTicketFileList">
1075: <purpose></purpose>
1076: </API>
1077: 
1078: <API id="adminTicketFileAttach">
1079: <purpose></purpose>
1080: ticketid,
1081: uuid
1082: </API>
1083: 
1084: <API id="adminTicketFileGet">
1085: <purpose>download a file attached to a ticket.</purpose>
1086: <input id="ticketid">ticket #</input>
1087: <input optional="1" id="remote">remote stored filename obtained from @FILES[] in adminTicketFileList</input>
1088: <input optional="1" id="orig">original (uploaded) file name obtained from @FILES[] in adminTicketFileList</input>
1089: </API>
1090: 
1091: <API id="adminTicketFileRemove">
1092: <purpose></purpose>
1093: </API>
1094: 
1095: 
1096: <API id="adminProductReviewList">
1097: <purpose>returns a list of all reviews with a filter</purpose>
1098: <input id="filter">ALL|UNAPPROVED|RECENT</input>
1099: <input id="PID" optional="1">product id</input>
1100: </API>
1101: 
1102: <API id="adminProductReviewCreate">
1103: <purpose></purpose>
1104: Not finished
1105: </API>
1106: 
1107: <API id="adminProductReviewApprove">
1108: <purpose></purpose>
1109: <input id="RID">review id</input>
1110: Not finished
1111: </API>
1112: 
1113: <API id="adminProductReviewRemove">
1114: <input id="RID">review id</input>
1115: <purpose></purpose>
1116: Not finished
1117: </API>
1118: 
1119: <API id="adminProductReviewUpdate">
1120: <input id="RID">review id</input>
1121: <input id="CUSTOMER_NAME"></input>
1122: <input id="LOCATION"></input>
1123: <input id="RATING"></input>
1124: <input id="SUBJECT"></input>
1125: <input id="MESSAGE"></input>
1126: <input id="BLOG_URL"></input>
1127: <purpose></purpose>
1128: Not finished
1129: </API>
1130: 
1131: <API id="adminProductReviewDetail">
1132: <input id="RID">review id</input>
1133: <input id="PID">review id</input>
1134: <purpose></purpose>
1135: Not finished
1136: </API>
1137: 
1138: 
1139: <API id="adminDSAgentList">
1140: <purpose>returns a list of projects</purpose>
1141: </API>
1142: 
1143: <API id="adminDSAgentCreate">
1144: <purpose></purpose>
1145: </API>
1146: 
1147: <API id="adminDSAgentRemove">
1148: <purpose></purpose>
1149: </API>
1150: 
1151: <API id="adminDSAgentUpdate">
1152: <purpose></purpose>
1153: </API>
1154: 
1155: <API id="adminDSAgentDetail">
1156: <purpose></purpose>
1157: </API>
1158: 
1159: 
1160: <API id="adminCIEngineConfig">
1161: <concept>CIENGINE</concept>
1162: </API>
1163: 
1164: <API id="adminCIEngineMacro">
1165: <concept>CIENGINE</concept>
1166: </API>
1167: 
1168: <API id="adminCIEngineAgentList">
1169: <concept>CIENGINE</concept>
1170: </API>
1171: 
1172: <API id="adminCIEngineAgentCreate">
1173: <concept>CIENGINE</concept>
1174: <input id="NAME"></input>
1175: <input id="GUID"></input>
1176: <input id="SCRIPT"></input>
1177: </API>
1178: 
1179: <API id="adminCIEngineAgentUpdate">
1180: <concept>CIENGINE</concept>
1181: <input id="NAME"></input>
1182: <input id="GUID"></input>
1183: <input id="SCRIPT"></input>
1184: </API>
1185: 
1186: <API id="adminCIEngineAgentDetail">
1187: <concept>CIENGINE</concept>
1188: </API>
1189: 
1190: <API id="adminCIEngineAgentRemove">
1191: <concept>CIENGINE</concept>
1192: </API>
1193: 
1194: <API id="adminCIEngineLogSearch">
1195: <concept>CIENGINE</concept>
1196: </API>
1197: 
1198: 
1199: 
1200: <API id="adminTemplateList">
1201: <purpose></purpose>
1202: <input id="CONTAINERID">ebay profile or campaign id</input>
1203: <input id="TYPE">EBAY|CPG|CIA|APP</input>
1204: <output id="@TEMPLATES"></output>
1205: </API>
1206: 
1207: <API id="adminTemplateInstall">
1208: <purpose>installs a template into a container</purpose>
1209: <input id="CONTAINERID">ebay profile or campaign id</input>
1210: <input id="TYPE">EBAY|CPG|CIA|APP</input>
1211: <input id="PROJECTID"></input>
1212: <input id="SUBDIR"></input>
1213: </API>
1214: 
1215: <API id="adminTemplateCreateFrom">
1216: <purpose>copies from a container into a template</purpose>
1217: <input id="CONTAINERID">ebay profile or campaign id</input>
1218: <input id="TYPE">EBAY|CPG|CIA|APP</input>
1219: <input id="PROJECTID">optional (defaults to TEMPLATES)</input>
1220: <input id="SUBDIR"></input>
1221: <output id="files"># of files copied</output>
1222: <output id="dirs"># of sub-directories copied</output>
1223: </API>
1224: 
1225: <API id="adminTemplateDetail">
1226: <purpose>displays the details of a TEMPLATE</purpose>
1227: <input id="TYPE">EBAY|CPG|CIA|APP</input>
1228: <input id="PROJECTID"></input>
1229: <input id="SUBDIR"></input>
1230: </API>
1231: 
1232: 
1233: 
1234: 
1235: 
1236: <API id="adminCampaignDetail">
1237: <purpose>returns a campaign object in %CAMPAIGN</purpose>
1238: <input id="CAMPAIGNID"></input>
1239: <output id="%CAMPAIGN"></output>
1240: </API>
1241: 
1242: <API id="adminCampaignAvailableCoupons">
1243: <purpose>a campaign can be associated with a coupon</purpose>
1244: <output id="@COUPONS"></output>
1245: </API>
1246: 
1247: <API id="adminCampaignCreate">
1248: <purpose>Creates a new campaign</purpose>
1249: <input id="CAMPAIGNID"></input>
1250: <input id="TITLE"></input>
1251: <input id="SEND_EMAIL">1|0</input>
1252: <input id="SEND_APPLEIOS">1|0</input>
1253: <input id="SEND_ANDROID">1|0</input>
1254: <input id="SEND_FACEBOOK">1|0</input>
1255: <input id="SEND_TWITTER">1|0</input>
1256: <input id="SEND_SMS">1|0</input>
1257: <input id="QUEUEMODE">FRONT|BACK|OVERWRITE</input>
1258: <input id="EXPIRES">YYYYMMDD</input>
1259: <input id="COUPON">CODE</input>
1260: </API>
1261: 
1262: <API id="adminCampaignUpdate">
1263: <purpose>see adminCampaignCreate for parameters</purpose>
1264: <input id="CPG">campaign id#</input>
1265: </API>
1266: 
1267: <API id="adminCampaignRemove">
1268: <input id="CAMPAIGNID">campaign id#</input>
1269: </API>
1270: 
1271: <API id="adminCampaignMacro">
1272: <purpose></purpose>
1273: <input id="CPG"></input>
1274: <input id="@updates">
1275: * CPGCOPY
1276: * CPGTEST?
1277: * CPGSTART?STARTTS=timestamp
1278: * CPGSTOP?
1279: * SUBADD?email=
1280: * SUBDEL?email=
1281: * 
1282: </input>
1283: 
1284: </API>
1285: 
1286: <API id="adminCampaign">
1287: <purpose></purpose>
1288: </API>
1289: 
1290: <API id="adminCampaign">
1291: <purpose></purpose>
1292: </API>
1293: 
1294: <API id="adminEBAYTemplateDownload">
1295: <purpose>lists the fields on an html wizard</purpose>
1296: <input id="ebay:template"></input>
1297: </API>
1298: 
1299: <API id="adminEBAYAPI-AddItem">
1300: <purpose>runs an eBay API calls</purpose>
1301: <input id="Item/SKU">product id</input>
1302: <input id="Item/Quantity">quantity to launch (must be 1 for auctions)</input>
1303: <input id="Item/UUID">a unique # for this request</input>
1304: <input id="Profile">zoovy launch profile to load settings from, if profile is not set, then ebay:profile will be used.</input>
1305: </API>
1306: 
1307: <API id="adminEBAYAPI-VerifyAddItem">
1308: <purpose>runs an eBay VerifyAddItem (see adminEBAYAPI-AddItem)</purpose>
1309: </API>
1310: 
1311: <API id="adminEBAYAPI-AddFixedPriceItem">
1312: <purpose>runs an eBay AddFixedPriceItem (see adminEBAYAPI-AddItem)</purpose>
1313: </API>
1314: 
1315: <API id="adminEBAYAPI-VerifyAddFixedPriceItem">
1316: <purpose>runs an eBay VerifyAddFixedPriceItem (see adminEBAYAPI-AddItem)</purpose>
1317: </API>
1318: 
1319: 
1320: <API id="adminEBAYTokenList">
1321: <purpose>lists all tokens across all partitions (one token per partition)</purpose>
1322: <output id="@ACCOUNTS"></output>
1323: </API>
1324: 
1325: <API id="adminEBAYTokenDetail">
1326: <purpose>performs ebay 'GetUser' call to verify current token, returns info associated with the partition</purpose>
1327: <output id="@PROFILES"></output>
1328: <output id="%TOKEN"></output>
1329: </API>
1330: 
1331: <API id="adminEBAYProfileDetail">
1332: <purpose>Returns the data in an eBay launch profile</purpose>
1333: </API>
1334: 
1335: <API id="adminEBAYProfileList">
1336: <purpose>Returns the list of possible profiles</purpose>
1337: </API>
1338: 
1339: <API id="adminEBAYShippingDetail">
1340: <purpose>Parses and returns a structured version of the shipping configuration for the profile requested</purpose>
1341: <input id="PROFILE"></input>
1342: <output id="@OUR_DOMESTIC"></output>
1343: <output id="@OUR_INTERNATIONAL"></output>
1344: <output id="@ALL_LOCATIONS"></output>
1345: <output id="@OUR_LOCATIONS"></output>
1346: <output id="@PREFERENCES"></output>
1347: <output id="@SERVICES_DOMESTIC"></output>
1348: <output id="@SERVICES_INTERNATIONAL"></output>
1349: </API>
1350: 
1351: <API id="adminEBAYWizardPreview">
1352: <purpose>-- will need some love --</purpose>
1353: </API>
1354: 
1355: <API id="adminEBAYMacro">
1356: <purpose>Modify the eBay Configuration</purpose>
1357: <input id="PROFILE" optional="1">Profile specific calls require admin</input>
1358: </API>
1359: 
1360: <API id="adminSyndicationList">
1361: <purpose>returns a list of marketplaces and their configuration status</purpose>
1362: </API>
1363: 
1364: <API id="adminSyndicationDetail">
1365: <purpose></purpose>
1366: <input id="DST">marketplace destination code (usually 3 or 4 digits) which can be obtained from the dst code in appResourceGet 'integrations' file</input>
1367: </API>
1368: 
1369: 
1370: <API id="adminSyndicationPublish">
1371: <input id="DST">marketplace destination code (usually 3 or 4 digits) which can be obtained from the dst code in appResourceGet 'integrations' file</input>
1372: <input id="FEEDTYPE">PRODUCT|INVENTORY</input>
1373: <output id="JOBID"></output>
1374: <purpose>creates a batch job for publishing</purpose>
1375: </API>
1376: 
1377: <API id="adminSyndicationHistory">
1378: <input id="DST">marketplace destination code (usually 3 or 4 digits) which can be obtained from the dst code in appResourceGet 'integrations' file</input>
1379: <output id="@ROWS">
1380: 	[ msgtype1, timestamp1, message1 ],
1381: 	[ msgtype2, timestamp2, message2 ],
1382: </output>
1383: <purpose></purpose>
1384: </API>
1385: 
1386: <API id="adminSyndicationFeedErrors">
1387: <input id="DST">marketplace destination code (usually 3 or 4 digits) which can be obtained from the dst code in appResourceGet 'integrations' file</input>
1388: <purpose>displays up to 500 to remove/hide these.</purpose>
1389: <output id="@ROWS">
1390: 	[ timestamp1, sku1, feedtype1, errcode1, errmsg1, batchjob#1 ],
1391: 	[ timestamp2, sku2, feedtype2, errcode2, errmsg2, batchjob#2 ],
1392: </output>
1393: </API>
1394: 
1395: <API id="adminSyndicationDebug">
1396: <input id="DST">marketplace destination code (usually 3 or 4 digits) which can be obtained from the dst code in appResourceGet 'integrations' file</input>
1397: <input id="FEEDTYPE">PRODUCT|INVENTORY</input>
1398: <input id="PID" optional="1">PRODUCTID</input>
1399: <output id="HTML">Html messaging describing the syndication process + any errors</output>
1400: <purpose>runs the syndication process in realtime and returns an html response describing 'what happened'</purpose>
1401: </API>
1402: 
1403: 
1404: 
1405: 
1406: <API id="adminSyndicationBUYDownloadDBMaps">
1407: <input id="DST">BUY|BST</input>
1408: <purpose>
1409: 	buy.com/bestbuy.com have support for json dbmaps, which allow uses to create ad-hoc schema that maps existing product attributes to buy.com data.
1410: 	since buy.com product feeds are no longer sent in an automated fasion the utility of this feature is somewhat limited, but can still be used to perform additional validation
1411: 	during/prior to export.
1412: 	each dbmap has a 1-8 digit code, and associated json (which uses a modified flexedit syntax).
1413: 	each product would then have a corresponding buycom:dbmap or bestbuy:dbmap field set.
1414: </purpose>
1415: </API>
1416: 
1417: <API id="adminSyndicationAMZThesaurii">
1418: <input id="DST">AMZ</input>
1419: <output id="@CATEGORIES">
1420: 	[ safename, prettyname, thesauruskey, thesaurusvalue ]
1421: </output>
1422: <purpose>
1423: 	store categories may have one or more amazon thesauruses associated with it a thesaurus helps amazon classify a product similar to a category+tag might in other systems.
1424: 	for example 'color' 'navy' in the amazon system might be equivalent to 'color' 'blue' when somebody does a search, but not 'color' 'teal' (which might also map to both blue/green).
1425: 	a single category may have many thesaurus keys/values.
1426: </purpose>
1427: </API>
1428: 
1429: <API id="adminSyndicationAMZOrders">
1430: <input id="DST">AMZ</input>
1431: <purpose>displays orders created in the last 50 days which have not been flagged as fulfilled/processed. </purpose>
1432: </API>
1433: 
1434: <API id="adminSyndicationAMZLogs">
1435: <input id="DST">marketplace destination code (usually 3 or 4 digits) which can be obtained from the dst code in appResourceGet 'integrations' file</input>
1436: <output id="@ROWS">
1437: 	[ pid, sku, feed, ts, msgtype, msg ]
1438: </output>
1439: <purpose>returns up to 1000 products where the amazon error flag is set in the SKU Lookup table.</purpose>
1440: </API>
1441: 
1442: <API id="adminSyndicationListFiles">
1443: <input id="DST">marketplace destination code (usually 3 or 4 digits) which can be obtained from the dst code in appResourceGet 'integrations' file</input>
1444: <output id="@FILES">
1445: 	{ FILENAME, FILETYPE, GUID }
1446: </output>
1447: <purpose></purpose>
1448: </API>
1449: 
1450: <API id="adminSyndicationMacro">
1451: <input id="DST">marketplace destination code (usually 3 or 4 digits) which can be obtained from the dst code in appResourceGet 'integrations' file</input>
1452: <input id="@updates"><![CDATA[
1453: DELETE
1454: ENABLE
1455: DISABLE
1456: UNSUSPEND
1457: CLEAR-FEED-ERRORS
1458: SAVE?fields=from&input=form
1459: DBMAP-NUKE?MAPID=
1460: DBMAP-SAVE?MAPID=&CATID=&STOREID=&MAPTXT=
1461: AMZ-THESAURUS-DELETE?guid=
1462: AMZ-THESAURUS-SAVE?name=&guid=&search_terms&itemtype=&subjectcontent&targetaudience&isgiftwrapavailable&
1463: AMZ-SHIPPING-SAVE?Standard=XXX&Expedited=XXY&Scheduled=XXZ&NextDay=XYY&SecondDay=XYZ
1464: AMZ-TOKEN-UPDATE?marketplaceId=&merchantId=
1465: ]]>
1466: </input>
1467: <purpose></purpose>
1468: </API>
1469: 
1470: 
1471: <API id="adminAffiliateList">
1472: <purpose>returns a list of projects</purpose>
1473: </API>
1474: 
1475: <API id="adminAffiliateCreate">
1476: <purpose></purpose>
1477: Not finished
1478: </API>
1479: 
1480: <API id="adminAffiliateRemove">
1481: <purpose></purpose>
1482: Not finished
1483: </API>
1484: 
1485: <API id="adminAffiliateUpdate">
1486: <purpose></purpose>
1487: Not finished
1488: </API>
1489: 
1490: <API id="adminAffiliateDetail">
1491: <purpose></purpose>
1492: Not finished
1493: </API>
1494: 
1495: 
1496: <API id="adminGiftcardList">
1497: <purpose>returns a list of projects</purpose>
1498: </API>
1499: 
1500: <API id="adminGiftcardSeriesList">
1501: <purpose>returns a list of projects</purpose>
1502: </API>
1503: 
1504: <API id="adminGiftcardSearch">
1505: </API>
1506: 
1507: <API id="adminGiftcardSetupProduct">
1508: </API>
1509: 
1510: <API id="adminGiftcardCreate">
1511: <purpose></purpose>
1512: <input id="expires">YYYYMMDD</input>
1513: <input id="balance">currency</input>
1514: <input id="quantity">defaults to 1 (if not specified)</input>
1515: <input id="email" optional="1">if a customer exists this will be matched to the cid, if a customer cannot be found a new customer account will be created, not compatible with qty > 1</input>
1516: <input id="series" optional="1">a mechanism for grouping cards, usually used with quantity greater than 1</input>
1517: </API>
1518: 
1519: <API id="adminGiftcardRemove">
1520: <purpose></purpose>
1521: Not finished
1522: </API>
1523: 
1524: <API id="adminGiftcardMacro">
1525: <purpose></purpose>
1526: <example>
1527: <![CDATA[
1528: [1:00:00 PM] Brian Horakh: @updates
1529: [1:00:10 PM] Brian Horakh: SET/EMAIL?email=&note=
1530: [1:00:11 PM] jt: adminGiftcardMacro
1531: [1:00:18 PM] Brian Horakh: SET/BALANCE?email=&note=
1532: [1:00:35 PM] Brian Horakh: SET/EXPIRES?expires=&note=
1533: [1:00:43 PM] Brian Horakh: SET/CARDTYPE?cardtype=&note=
1534: Not finished
1535: ]]></example>
1536: </API>
1537: 
1538: <API id="adminGiftcardDetail">
1539: <purpose></purpose>
1540: Not finished
1541: </API>
1542: 
1543: <API id="adminGiftcardSetupProduct">
1544: <purpose>creates a product that when purchased automatically creates a giftcard</purpose>
1545: </API>
1546: 
1547: <API id="adminEmailMessageList">
1548: <purpose>returns a list of projects</purpose>
1549: </API>
1550: 
1551: <API id="adminEmailMessageCreate">
1552: <purpose></purpose>
1553: <input id="feed_title"></input>
1554: <input id="feed_link"></input>
1555: <input id="feed_link_override"></input>
1556: <input id="feed_subject"></input>
1557: <input id="max_products"></input>
1558: <input id="cycle_interval"></input>
1559: <input id="schedule"></input>
1560: <input id="profile"></input>
1561: <input id="list"></input>
1562: <input id="image_h"></input>
1563: <input id="image_w"></input>
1564: <input id="translation"></input>
1565: <input id="coupon"></input>
1566: </API>
1567: 
1568: <API id="adminEmailMessageClone">
1569: <purpose></purpose>
1570: <input id="CPG"></input>
1571: </API>
1572: 
1573: <API id="adminEmailMessageRemove">
1574: <purpose></purpose>
1575: <input id="CPG"></input>
1576: </API>
1577: 
1578: <API id="adminEmailMessageUpdate">
1579: <purpose></purpose>
1580: <input id="CPG"></input>
1581: </API>
1582: 
1583: <API id="adminEmailMessageDetail">
1584: </API>
1585: 
1586: 
1587: <API id="adminRSSList">
1588: <purpose>returns a list of projects</purpose>
1589: </API>
1590: 
1591: <API id="adminRSSCreate">
1592: <purpose></purpose>
1593: <input id="feed_title"></input>
1594: <input id="feed_link"></input>
1595: <input id="feed_link_override"></input>
1596: <input id="feed_subject"></input>
1597: <input id="max_products"></input>
1598: <input id="cycle_interval"></input>
1599: <input id="schedule"></input>
1600: <input id="profile"></input>
1601: <input id="list"></input>
1602: <input id="image_h"></input>
1603: <input id="image_w"></input>
1604: <input id="translation"></input>
1605: <input id="coupon"></input>
1606: </API>
1607: 
1608: <API id="adminRSSClone">
1609: <purpose></purpose>
1610: <input id="CPG"></input>
1611: </API>
1612: 
1613: <API id="adminRSSRemove">
1614: <purpose></purpose>
1615: <input id="CPG"></input>
1616: </API>
1617: 
1618: <API id="adminRSSUpdate">
1619: <purpose></purpose>
1620: <input id="CPG"></input>
1621: </API>
1622: 
1623: <API id="adminRSSDetail">
1624: </API>
1625: 
1626: 
1627: <API id="adminProjectList">
1628: <purpose>returns a list of projects</purpose>
1629: </API>
1630: 
1631: <API id="adminProjectCreate">
1632: <purpose></purpose>
1633: Not finished
1634: </API>
1635: 
1636: <API id="adminProjectClone">
1637: <purpose></purpose>
1638: Not finished
1639: </API>
1640: 
1641: <API id="adminProjectRemove">
1642: <purpose></purpose>
1643: Not finished
1644: </API>
1645: 
1646: <API id="adminProjectUpdate">
1647: <purpose></purpose>
1648: Not finished
1649: </API>
1650: 
1651: <API id="adminProjectDetail">
1652: <purpose></purpose>
1653: Not finished
1654: </API>
1655: 
1656: 
1657: <API id="adminAppTicketList">
1658: <purpose></purpose>
1659: </API>
1660: 
1661: <API id="adminAppTicketSearch">
1662: <purpose></purpose>
1663: <input optional="1" id="lookup">any string</input>
1664: <input optional="1" id="lookup-orderid">order #</input>
1665: <input optional="1" id="lookup-email">email</input>
1666: <input optional="1" id="lookup-phone">phone</input>
1667: <input optional="1" id="lookup-ticket">ticket #</input>
1668: </API>
1669: 
1670: <API id="adminAppTicketCreate">
1671: <purpose></purpose>
1672: </API>
1673: 
1674: <API id="adminAppTicketRemove">
1675: <purpose></purpose>
1676: </API>
1677: 
1678: <API id="adminAppTicketMacro">
1679: <purpose></purpose>
1680: <example>
1681: <![CDATA[
1682: * ADDNOTE?note=xyz&private=1|0
1683: * ASK?
1684: * UPDATE?escalate=1|0&class=PRESALE|POSTSALE|EXCHANGE|RETURN
1685: * CLOSE
1686: * 
1687: ]]>
1688: </example>
1689: </API>
1690: 
1691: <API id="adminAppTicketDetail">
1692: <purpose></purpose>
1693: </API>
1694: 
1695: <API id="adminPriceScheduleList">
1696: <purpose>Returns a list of available schedule id's.  
1697: Each schedule has a unique 6 digit alphanumeric code that is used as an identifier.
1698: </purpose>
1699: <output id="@SCHEDULES">
1700: { 'id':'SCHED1' },
1701: { 'id':'SCHED2' },
1702: { 'id':'SCHED3' },
1703: </output>
1704: </API>
1705: 
1706: <API id="adminPriceScheduleCreate">
1707: <purpose></purpose>
1708: </API>
1709: 
1710: <API id="adminPriceScheduleRemove">
1711: <purpose></purpose>
1712: <input id="SID">schedule</input>
1713: </API>
1714: 
1715: <API id="adminPriceScheduleUpdate">
1716: <purpose></purpose>
1717: </API>
1718: 
1719: <API id="adminPriceScheduleDetail">
1720: <purpose></purpose>
1721: <input id="SID">schedule</input>
1722: </API>
1723: 
1724: 
1725: 
1726: <API id="adminKPIDBCollectionList">
1727: <purpose></purpose>
1728: <output id="@COLLECTIONS"></output>
1729: </API>
1730: 
1731: <API id="adminKPIDBCollectionCreate">
1732: <purpose></purpose>
1733: <input id="title">Title of the Collection</input>
1734: <input id="uuid">Unique identifier (36 characters) for the collection</input>
1735: <input id="priority">The position/priority/sequence of the collection</input>
1736: <input id="@GRAPHS">an array of graphs which will be serialized and returned</input>
1737: </API>
1738: 
1739: <API id="adminKPIDBCollectionUpdate">
1740: <purpose>same as collection create (pass uuid of previous collection)</purpose>
1741: </API>
1742: 
1743: <API id="adminKPIDBCollectionRemove">
1744: <purpose>removes a collection</purpose>
1745: <input id="uuid">Unique identifier (36 characters) for the collection</input>
1746: </API>
1747: 
1748: <API id="adminKPIDBCollectionDetail">
1749: <purpose>returns the contents of a collection</purpose>
1750: <input id="uuid">Unique identifier for this collection</input>
1751: </API>
1752: 
1753: <API id="adminKPIDBUserDataSetsList">
1754: <purpose>returns a list of datasets accessible to the user</purpose>
1755: <output id="@DATASETS">
1756: [ 'GROUP', 'DATASET-ID', 'Pretty name' ],
1757: [ 'GROUP', 'DATASET-ID', 'Pretty name' ],
1758: [ 'GROUP', 'DATASET-ID', 'Pretty name' ],
1759: </output>
1760: <hint>
1761: The DATASET-ID is what is passed into adminKPIDBDataQuery as the "dataset" parameter
1762: </hint>
1763: </API>
1764: 
1765: <API id="adminKPIDBDataQuery">
1766: <purpose></purpose>
1767: <input required="1" id="@datasets">['dataset1','dataset2']</input>
1768: <input required="1" id="grpby">day|dow|quarter|month|week|none</input>
1769: <input required="1" id="column">gms|distinct|total</input>
1770: <input required="1" id="function">sum|min|max|avg</input>
1771: <input optional="1" id="period">a formula ex: months.1, weeks.1</input>
1772: <input optional="1" id="startyyyymmdd">(not needed if period is passed)</input>
1773: <input optional="1" id="stopyyyymmdd">(not needed if period is passed)</input>
1774: </API>
1775: 
1776: <API id="adminIncompleteList">
1777: </API>
1778: 
1779: <API id="adminIncompleteCreate">
1780: </API>
1781: 
1782: <API id="adminIncompleteUpdate">
1783: </API>
1784: 
1785: <API id="adminPageGet">
1786: <purpose></purpose>
1787: <input id="PATH"> .path.to.page or @CAMPAIGNID</input>
1788: <input id="@get"> [ 'attrib1', 'attrib2', 'attrib3' ]</input>
1789: <input id="all"> set to 1 to return all fields (handy for json libraries which don't return @get=[]) </input>
1790: <example>
1791: attrib1:xyz
1792: attrib2:xyz
1793: </example>
1794: <note>leave @get blank for all page attributes</note>
1795: </API>
1796: 
1797: <API id="adminPageSet">
1798: <purpose></purpose>
1799: <input id="PATH">.path.to.page or @CAMPAIGNID</input>
1800: <input id="%set"> { 'attrib1'=>'newvalue', 'attrib2'=>'new value', 'attrib3'=>undefined }</input>
1801: <hint>set value to "undefined" to delete it.</hint>
1802: </API>
1803: 
1804: <API id="adminPageList">
1805: <purpose></purpose>
1806: <input id="@PAGES"></input>
1807: </API>
1808: 
1809: <API id="adminEmailList">
1810: <purpose></purpose>
1811: <input id="PRT"></input>
1812: <input id="TYPE">TICKET,PRODUCT,ORDER,ACCOUNT,SUPPLY,CUSTOMER,INCOMPLETE</input>
1813: <example><![CDATA[
1814: @RESULTS:[
1815: 	{ MSGBODY:"", MSGTITLE:, MSGTYPE:"" },
1816: 	{ MSGBODY:"", MSGTITLE:, MSGTYPE:"" },
1817: 	]
1818: @MACROS:[
1819: 	]
1820: ]]>
1821: </example>
1822: </API>
1823: 
1824: <API id="adminEmailSave">
1825: <input id="PRT"></input>
1826: <input id="MSGID">ORDER.CREATE</input>
1827: 
1828: <input id="SUBJECT"></input>
1829: <input id="BODY"></input>
1830: <input id="TYPE"></input>
1831: <input id="BCC"></input>
1832: <input id="FROM"></input>
1833: <input id="FORMAT"></input>
1834: </API>
1835: 
1836: <API id="adminCustomerOrganizationSearch">
1837: <purpose>find an organization</purpose>
1838: <input id="CONTACT"></input>
1839: <input id="PHONE"></input>
1840: <input id="DOMAIN"></input>
1841: <input id="EMAIL"></input>
1842: <input id="ORGID"></input>
1843: <input id="IS_LOCKED"></input>
1844: <input id="ACCOUNT_MANAGER"></input>
1845: <input id="ACCOUNT_TYPE"></input>
1846: <input id="SCHEDULE"></input>
1847: 
1848: 
1849: <response id=""></response>
1850: </API>
1851: 
1852: <API id="adminCustomerOrganizationCreate">
1853: <purpose></purpose>
1854: <code><![CDATA[
1855: ** THESE WILL PROBABLY CHANGE **
1856: 
1857: | ID              | int(10) unsigned    | NO   | PRI | NULL    | auto_increment |
1858: | MID             | int(10) unsigned    | NO   | MUL | 0       |                |
1859: | USERNAME        | varchar(20)         | NO   |     |         |                |
1860: | PRT             | tinyint(3) unsigned | NO   |     | 0       |                |
1861: | CID             | int(10) unsigned    | NO   |     | 0       |                |
1862: | EMAIL           | varchar(65)         | NO   |     |         |                |
1863: | DOMAIN          | varchar(65)         | YES  |     | NULL    |                |
1864: | firstname       | varchar(25)         | NO   |     |         |                |
1865: | lastname        | varchar(25)         | NO   |     |         |                |
1866: | company         | varchar(100)        | NO   |     |         |                |
1867: | address1        | varchar(60)         | NO   |     |         |                |
1868: | address2        | varchar(60)         | NO   |     |         |                |
1869: | city            | varchar(30)         | NO   |     |         |                |
1870: | region          | varchar(10)         | NO   |     |         |                |
1871: | postal          | varchar(9)          | NO   |     |         |                |
1872: | countrycode     | varchar(9)          | NO   |     |         |                |
1873: | phone           | varchar(12)         | NO   |     |         |                |
1874: | LOGO            | varchar(60)         | NO   |     |         |                |
1875: | BILLING_CONTACT | varchar(60)         | NO   |     |         |                |
1876: | BILLING_PHONE   | varchar(60)         | NO   |     |         |                |
1877: | ALLOW_PO        | tinyint(3) unsigned | NO   |     | 0       |                |
1878: | RESALE          | tinyint(3) unsigned | NO   |     | 0       |                |
1879: | RESALE_PERMIT   | varchar(20)         | NO   |     |         |                |
1880: | CREDIT_LIMIT    | decimal(10,2)       | NO   |     | NULL    |                |
1881: | CREDIT_BALANCE  | decimal(10,2)       | NO   |     | NULL    |                |
1882: | CREDIT_TERMS    | varchar(25)         | NO   |     |         |                |
1883: | ACCOUNT_MANAGER | varchar(10)         | NO   |     |         |                |
1884: | ACCOUNT_TYPE    | varchar(20)         | NO   |     |         |                |
1885: | ACCOUNT_REFID   | varchar(36)         | NO   |     |         |                |
1886: | JEDI_MID        | int(11)             | NO   |     | 0       |                |
1887: | BUYER_PASSWORD
1888: 
1889: ]]></code>
1890: <response id=""></response>
1891: </API>
1892: 
1893: <API id="adminCustomerOrganizationUpdate">
1894: <purpose></purpose>
1895: <input id="ORGID"></input>
1896: <response id=""></response>
1897: </API>
1898: 
1899: <API id="adminCustomerOrganizationDetail">
1900: <purpose></purpose>
1901: <input id="ORGID"></input>
1902: <response id=""></response>
1903: </API>
1904: 
1905: <API id="adminCustomerOrganizationRemove">
1906: <purpose>remove an organization</purpose>
1907: <input id="ORGID"></input>
1908: <response id=""></response>
1909: </API>
1910: 
1911: <API id="adminCustomerSearch">
1912: <purpose></purpose>
1913: <concept>customer</concept>
1914: <input id="scope">GIFTCARD|SCHEDULE|ORDER|NAME|CID|EMAIL|PHONE|NOTES</input>
1915: <input id="searchfor">any text</input>
1916: <response id="@CUSTOMERS">Customer ID</response>
1917: <deprecated version="201318">
1918: 	<input id="email"></input>
1919: 	<response id="CID"></response>
1920: </deprecated>
1921: </API>
1922: 
1923: <API id="adminCustomerSelectorDetail">
1924: <purpose>a product customer is a relative pointer to a grouping of customers.</purpose>
1925: <concept>customer</concept>
1926: <input id="selector">
1927: CIDS=1,2,3,4
1928: EMAILS=user@domain.com,user2@domain.com
1929: SUBLIST=0	all subscribers (any list)
1930: SUBLIST=1-15	a specific subscriber list
1931: ALL=*			all customers (regardless of subscriber status)
1932: </input>
1933: <output id="@CIDS">an array of product id's</output>
1934: </API>
1935: 
1936: 
1937: <API id="adminCustomerRemove">
1938: <purpose></purpose>
1939: <input id="CID">customer id #</input>
1940: </API>
1941: 
1942: <API id="adminCustomerWalletPeek">
1943: <concept>wallet</concept>
1944: <purpose></purpose>
1945: </API>
1946: 
1947: <API id="adminCustomerDetail">
1948: 
1949: <purpose></purpose>
1950: <input id="CID">Customer ID</input>
1951: adminCustomerDetail supports additional parameters:
1952: <input id="newsletters">1 (returns @NEWSLETTERS)</input>
1953: <input id="addresses">1  (returns @BILLING @SHIPPING)   [[ this may duplicate data from %CUSTOMER ]]</input>
1954: <input id="wallets">1   (returns @WALLETS)</input>
1955: <input id="wholesale">1  (returns %WS)</input>
1956: <input id="giftcards">1 (returns @GIFTCARDS)</input>
1957: <input id="tickets">1 (returns @TICKETS)</input>
1958: <input id="notes">1 (returns @NOTES)</input>
1959: <input id="events">1 (returns @EVENTS)</input>
1960: <input id="orders">1 (returns @ORDERS)</input>
1961: <response id="%CUSTOMER">Customer Object</response>
1962: <concept>wallet</concept>
1963: </API>
1964: 
1965: <API id="adminCustomerUpdate">
1966: <purpose></purpose>
1967: <input id="CID">Customer ID</input>
1968: <input id="@updates">
1969: <![CDATA[
1970: <ul>
1971: * PASSWORDRESET?password=xyz    (or leave blank for random)
1972: * HINTRESET
1973: * SET?firstname=&lastname=&is_locked=&newsletter_1=
1974: * ADDRCREATE?SHORTCUT=DEFAULT&TYPE=BILL|SHIP&firstname=&lastname=&phone=&company=&address1&email=.. 
1975: * ADDRUPDATE? [see ADDRCREATE]
1976: * ADDRREMOVE?TYPE=&SHORTCUT=
1977: * SENDEMAIL?MSGID=&MSGSUBJECT=optional&MSGBODY=optional
1978: * ORGCREATE?firstname=&middlename=&lastname=&company=&address1=&address2=&city=&region=&postal=&countrycode=&phone=&email=&ALLOW_PO=&SCHEDULE=&RESALE=&RESALE_PERMIT=&CREDIT_LIMIT=&CREDIT_BALANCE=&CREDIT_TERMS=&ACCOUNT_MANAGER=&ACCOUNT_TYPE=&ACCOUNT_REFID=&JEDI_MID=&DOMAIN=&LOGO=&IS_LOCKED=&BILLING_PHONE=&BILLING_CONTACT=&
1979: * ORDERLINK?OID=
1980: * NOTECREATE?TXT=
1981: * NOTEREMOVE?NOTEID=
1982: * WALLETCREATE?CC=&YY=&MM=
1983: * WALLETDEFAULT?SECUREID=
1984: * WALLETREMOVE?SECUREID=
1985: * REWARDUPDATE?i=&reason=&
1986: * SETORIGIN?origin=integer
1987: * ADDTODO?title=&note=
1988: * ADDTICKET?title=&note=
1989: * DEPRECATED: WSSET?SCHEDULE=&ALLOW_PO=&RESALE=&RESALE_PERMIT=&CREDIT_LIMIT=&CREDIT_BALANCE=&ACCOUNT_MANAGER=& 
1990: </ul>
1991: ]]>
1992: </input>
1993: <response id="*C">Customer Object</response>
1994: <example>
1995: <![CDATA[
1996: example needed.
1997: ]]>
1998: </example>
1999: <concept>wallet</concept>
2000: </API>
2001: 
2002: <API id="adminCustomerCreate">
2003: <purpose></purpose>
2004: <input id="@updates">
2005: <![CDATA[
2006: * CREATE?email=
2007: see adminCustomerUpdate
2008: ]]>
2009: </input>
2010: <response id="*C">Customer Object</response>
2011: <example>
2012: <![CDATA[
2013: example needed.
2014: ]]>
2015: </example>
2016: </API>
2017: 
2018: 
2019: <API id="adminProductManagementCategoriesList">
2020: <purpose></purpose>
2021: <response id="@CATEGORIES"></response>
2022: </API>
2023: 
2024: <API id="adminProductManagementCategoriesComplete">
2025: <purpose></purpose>
2026: <response id="%CATEGORIES"></response>
2027: </API>
2028: 
2029: <API id="adminProductManagementCategoriesDetail">
2030: <purpose></purpose>
2031: <input id="category"></input>
2032: <response id="@PRODUCTS"></response>
2033: </API>
2034: 
2035: <API id="adminDomainList">
2036: <purpose></purpose>
2037: <input optional="1" id="prt">partition (optional)</input>
2038: <input optional="1" id="hosts">0|1  (optional)</input>
2039: <response id="@DOMAINS">an array of domains, each row contains { id:domainname prt:# }</response>
2040: </API>
2041: 
2042: <API id="adminDomainDetail">
2043: <input id="DOMAINNAME"></input>
2044: <output id="@MSGS"></output>
2045: </API>
2046: 
2047: <API id="adminDomainDetail">
2048: <input id="DOMAINNAME"></input>
2049: <output id="@HOSTS">
2050: 	{ "HOSTNAME":"www", "HOSTTYPE":"APP|REDIR|VSTORE|CUSTOM" },
2051: 	HOSTTYPE=APP		will have "PROJECT"
2052: 	HOSTTYPE=REDIR	will have "REDIR":"www.domain.com" "URI":"/path/to/301"  (if URI is blank then it will redirect with previous path)
2053: 	HOSTTYPE=VSTORE	will have @REWRITES
2054: <output id="%EMAIL">
2055: 	EMAIL_TYPE=FUSEMAIL
2056: 	EMAIL_TYPE=GOOGLE
2057: 	EMAIL_TYPE=NONE
2058: 	EMAIL_TYPE=MX		MX1,MX2 parameters
2059: 	
2060: </output>
2061: </output>
2062: </API>
2063: 
2064: <API id="adminDomainMacro">
2065: <input id="DOMAINNAME">domain.com</input>
2066: <input id="@updates">
2067: <![CDATA[
2068: DOMAIN-RESERVE		(note: leave DOMAINNAME blank/empty)
2069: DOMAIN-TRANSFER
2070: DOMAIN-REGISTER
2071: DOMAIN-DELEGATE
2072: DOMAIN-REMOVE
2073: DOMAIN-PRT-SET?PRT=###
2074: HOST-ADD?HOSTNAME=www|app|m
2075: HOST-SET?HOSTNAME=www|app|m&HOSTTYPE=PROJECT|VSTORE|REDIR|CUSTOM
2076: HOST-KILL?HOSTNAME=www
2077: EMAIL-DKIM-INIT
2078: EMAIL-SET?TYPE=FUSEMAIL|GOOGLE|NONE|MX&MX1=&MX2=
2079: VSTORE-MAKE-PRIMARY
2080: VSTORE-KILL-REWRITE?PATH=
2081: VSTORE-ADD-REWRITE?PATH=&TARGETURL=
2082: ]]>
2083: </input>
2084: </API>
2085: 
2086: 
2087: 
2088: 
2089: <API id="adminPartitionList">
2090: <purpose></purpose>
2091: <response id="@PRTS">An array of partitions</response>
2092: </API>
2093: 
2094: <API id="adminUIProductPanelList">
2095: <purpose></purpose>
2096: <input id="pid">Product Identifier</input>
2097: <response id="@PANELS">An array of panels, each row has id, title, and position</response>
2098: </API>
2099: 
2100: <API id="adminUIProductPanelExecute">
2101: <purpose></purpose>
2102: <input id="pid">Product Identifier</input>
2103: <input id="sub">LOAD|SAVE|.. (other behaviors may be specified by the actual panel content)</input>
2104: <input id="panel">Panel Identifier (the 'id' field returned by adminUIProductList</input>
2105: <response id="html">the html content of the product editor panel</response>
2106: <response id="js">the js which is required by the panel.</response>
2107: </API>
2108: 
2109: <API id="adminUIBuilderPanelExecute">
2110: <purpose></purpose>
2111: <input id="sub">EDIT|SAVE|SAVE-EDIT</input>
2112: <input id="id">element id</input>
2113: 
2114: <input id="panel">Panel Identifier (the 'id' field returned by adminUIProductList</input>
2115: <response id="html">the html content of the product editor panel</response>
2116: <response id="js">the js which is required by the panel.</response>
2117: </API>
2118: 
2119: <API id="adminUIMediaLibraryExecute">
2120: <purpose></purpose>
2121: <input id="verb">LOAD|SAVE</input>
2122: <input id="src">(required for LOAD|SAVE)</input>
2123: <input id="IMG">(required for SAVE)</input>
2124: <response id="IMG"></response>
2125: </API>
2126: 
2127: <API id="adminTOXMLSetFavorite">
2128: <purpose></purpose>
2129: <input id="format">WRAPPER|LAYOUT|EMAIL</input>
2130: <input id="docid"></input>
2131: <input id="favorite">true|false</input>
2132: </API>
2133: 
2134: <API id="adminLUserTagList">
2135: <purpose></purpose>
2136: <input id="tag"></input>
2137: </API>
2138: 
2139: 
2140: <API id="adminLUserTagSet">
2141: <purpose></purpose>
2142: <input id="tag">data	</input>
2143: <hint>Limited to 128 bytes per tag, 10,000 tags max (then old tags are auto-expired)</hint>
2144: </API>
2145: 
2146: 
2147: <API id="adminLUserTagGet">
2148: <purpose></purpose>
2149: <input id="tag1">''</input>
2150: <input id="tag2">''</input>
2151: </API>
2152: 
2153: <API id="billingTransactions">
2154: <purpose></purpose>
2155: </API>
2156: 
2157: <API id="billingInvoiceList">
2158: <purpose></purpose>
2159: </API>
2160: 
2161: <API id="billingInvoiceDetail">
2162: <purpose></purpose>
2163: </API>
2164: 
2165: <API id="billingPaymentMacro">
2166: <purpose></purpose>
2167: </API>
2168: 
2169: <API id="billingPaymentList">
2170: <purpose></purpose>
2171: </API>
2172: 
2173: <API id="bossUserCreate">
2174: <purpose></purpose>
2175: <input id="tag"></input>
2176: </API>
2177: 
2178: <API id="bossUserList">
2179: <purpose></purpose>
2180: <input id="tag"></input>
2181: </API>
2182: 
2183: <API id="bossUserUpdate">
2184: <purpose></purpose>
2185: <input id="tag"></input>
2186: </API>
2187: 
2188: <API id="bossUserDelete">
2189: <purpose></purpose>
2190: <input id="tag"></input>
2191: </API>
2192: 
2193: <API id="bossUserDetail">
2194: <purpose></purpose>
2195: <input id="tag"></input>
2196: </API>
2197: 
2198: 
2199: <API id="bossRoleCreate">
2200: <purpose></purpose>
2201: <input id="tag"></input>
2202: </API>
2203: 
2204: <API id="bossRoleList">
2205: <purpose></purpose>
2206: <input id="tag"></input>
2207: </API>
2208: 
2209: <API id="bossRoleUpdate">
2210: <purpose></purpose>
2211: <input id="tag"></input>
2212: </API>
2213: 
2214: <API id="bossRoleDelete">
2215: <purpose></purpose>
2216: <input id="tag"></input>
2217: </API>
2218: 
2219: <API id="adminSOGDetail">
2220: <purpose>Returns a list of Store Option Groups (SOGs), see the SOG xml format for more specific information.</purpose>
2221: <input id="id">sog-id</input>
2222: </API>
2223: 
2224: <API id="adminSOGList">
2225: <purpose></purpose>
2226: </API>
2227: 
2228: <API id="adminSOGComplete">
2229: <purpose></purpose>
2230: </API>
2231: 
2232: <API id="adminSOGCreate">
2233: <purpose></purpose>
2234: <input id="%sog">json nested sog structure</input>
2235: </API>
2236: 
2237: <API id="adminSOGUpdate">
2238: <purpose></purpose>
2239: <input id="%sog">json nested sog structure</input>
2240: </API>
2241: 
2242: <API id="ping">
2243: <purpose></purpose>
2244: <note>Accepts: nothing</note>
2245: <note>Returns: (nothing of importance)</note>
2246: <response id="pong">1</response>
2247: </API>
2248: 
2249: <API id="whoAmI">
2250: <purpose>Utility function that returns who the current session is authenticated as.</purpose>
2251: <response id="cid"> #### (customer [buyer] id)</response>
2252: <response id="email"> user@fromloggedindomain.com</response>
2253: 
2254: <hint>
2255: If logged in as an admin sessino you'll get fun stuff like USERNAME,MID,CACHED_FLAGS,RESELLER and more.
2256: </hint>
2257: 
2258: </API>
2259: 
2260: <API id="whereAmI">
2261: <purpose></purpose>
2262: <purpose>Utility function that returns the city/state/zip of the IP making the call.</purpose>
2263: <response id="city"></response>
2264: <response id="state"></response>
2265: <response id="zip"></response>
2266: <response id="country"></response>
2267: </API>
2268: 
2269: <API id="canIUse">
2270: <purpose>Utility function which checks access to a specific bundle ex: CRM, XSELL</purpose>
2271: <input id="flag"></input>
2272: <response id="allowed">1|0</response>
2273: </API>
2274: 
2275: <API id="time">
2276: <purpose>Utility/Diagnostic Function</purpose>
2277: <response id="unix"> ########</response>
2278: <hint>
2279: Unix is an epoch timestamp (which represents the number of seconds since midnight january 1st, 1970)
2280: </hint>
2281: </API>
2282: 
2283: <API id="info">
2284: <purpose>Utility Function</purpose>
2285: <response id="time">########</response>
2286: <response id="media-host">########</response>
2287: <response id="api-max-version">########</response>
2288: <response id="api-min-version">########</response>
2289: <response id="api-our-version">########</response>
2290: <hint>
2291: Time is an epoch timestamp (which represents the number of seconds since midnight january 1st, 1970)
2292: </hint>
2293: </API>
2294: 
2295: <API id="appCategoryList">
2296: <purpose></purpose>
2297: <note>Accepts no parameters</note>
2298: <input id="root" optional="1">.root.category.path</input>
2299: <response id="@paths">['.','.safe1','.safe2']</response>
2300: </API>
2301: 
2302: <API id="appConfig">
2303: <purpose></purpose>
2304: <note>Accepts no parameters</note>
2305: </API>
2306: 
2307: <API id="cartDetail">
2308: <purpose>Lists the contents/settings in a cart along with summary values</purpose>
2309: <input id="_cartid"></input>
2310: <input id="create">1/0 - shall we create a cart if the cart requested doesn't exit?</input>
2311: </API>
2312: 
2313: <API id="appEventAdd">
2314: <purpose>
2315: User events are the facility for handling a variety of "future" and "near real time" backend operations.
2316: Each event has a name that describes what type of object it is working with ex: CART, ORDER, PRODUCT, CUSTOMER
2317: then a period, and what happened (or should happen in the future) ex: CART.GOTSTUFF, ORDER.CREATED, PRODUCT.CHANGED
2318: custom program code can be associated with a users account to "listen" for specific events and then take action.
2319: </purpose>
2320: <input id="event">CART.REMARKET</input>
2321: <input id="pid" optional="1">product id</input>
2322: <input id="pids" optional="1">multiple product id's (comma separated)</input>
2323: <input id="safe" optional="1">category id</input>
2324: <input id="sku" optional="1">inventory id</input>
2325: <input id="cid" optional="1">customer(buyer) id</input>
2326: <input id="email" optional="1">customer email</input>
2327: <input id="more" optional="1">a user defined field (for custom events)</input>
2328: <note>in addition each event generated will record: sdomain, ip, and cartid</note>
2329: <input id="uuid" optional="1" hint="to create a future event" >a unique identifier (cart id will be used if not specified)</input>
2330: <input id="dispatch_gmt" optional="1" hint="to create a future event"> an epoch timestamp when the future event should dispatch</input>
2331: </API>
2332: 
2333: <API id="appBuyerAuthenticate">
2334: <purpose>Authenticates a buyer against an enabled/supported trust service</purpose>
2335: <input id="auth">facebook|google</input>
2336: <input id="create">0|1</input>
2337: <input hint="auth=facebook" id="token">token</input>
2338: <input hint="auth=google" id="id_token">required for auth=google, only id_token or access_token are required (but both can safely be passed)</input>
2339: <input hint="auth=google" id="access_token">required for auth=google, only id_token or access_token are required (but both can safely be passed)</input>
2340: <output id="CID"></output>
2341: </API>
2342: 
2343: <API id="appCartCreate">
2344: <purpose></purpose>
2345: <input id="_cartid"></input>
2346: <input id="cartDetail"></input>
2347: <hint>
2348: You should take care to maintain your cart in a local persisent cookie.  
2349: This is *your* responsibility to pass this value on subsequent requests. (use appCartExists to test to see if it's valid)
2350: </hint>
2351: </API>
2352: 
2353: <API id="appCartExists">
2354: <purpose>This call tells if a cart/session has been previously created/saved. Since release 201314 it is not necessary to use because cart id's can now be created on the fly by an app.</purpose>
2355: <input id="_cartid"></input>
2356: <response id="_cartid"> </response>
2357: <response id="exists"> 1/0</response>
2358: </API>
2359: 
2360: <API id="cartItemsAdd">
2361: <purpose></purpose>
2362: <input id="_cartid"></input>
2363: <note>the same variables as the CGI post variables to the cart. [[LINKDOC]50110]</note>
2364: <response id="_msgs">(contains a count of the number of messages)</response>
2365: <response id="_msg_x_type"> warning|youerr|apperr|apierr|iseerr|success</response>
2366: <response id="_msg_x_id">	unique identifier for this message ex: 10000</response>
2367: <response id="_msg_x_txt">	the specific warning ex: No items added/removed from cart</response>
2368: <note>** the x in the example above will be a number 1.._msgs</note>
2369: <hint>
2370: Best practices involve displaying any errors, and warnings, and then suppressing any specific 
2371: warnings that you do not want to show (ex: ones that are caused by normal behavior).
2372: There may be zero messages.
2373: </hint>
2374: <errors>
2375: <err id="9101" type="cfgerr">Item cannot be added to cart due to price not set.</err>
2376: <err id="9102" type="cfgerr">could not lookup pogs</err>
2377: <err id="9103" type="cfgerr">Some of the items in this kit are not available for purchase: </err>
2378: <err id="9000" type="cfgerr">Unhandled item detection error</err>
2379: <err id="9001" type="cfgerr">Product xyz is no longer available</err>
2380: <err id="9002" type="cfgerr">Product xyz has already been purchased</err>
2381: </errors>
2382: </API>
2383: 
2384: <API id="cartItemsAddSerialized">
2385: <purpose></purpose>
2386: <input id="_cartid"></input>
2387: <input id="data">which is a form serializes (jquery.serialize) variables the cart. [[LINKDOC]50110]</input>
2388: <note>Returns: see addToCart</note>
2389: <hint>
2390: <![CDATA[
2391: This internally decodes 'data' from key1=value1&key2=value2 and passes it to addToCart, it's provided
2392: as a convenience to developers who want to quickly use jquery serialize to a form.
2393: ]]>
2394: </hint>
2395: </API>
2396: 
2397: <API id="cartItemAppend">
2398: <purpose></purpose>
2399: </API>
2400: 
2401: <API id="cartItemUpdate">
2402: <purpose></purpose>
2403: <input id="_cartid"></input>
2404: <input id="stid">xyz</input>
2405: <input id="uuid">xyz</input>
2406: <input id="quantity">1</input>
2407: <input id="_msgs">(contains a count of the number of messages)</input>
2408: <errors>
2409: <err id="9101" type="cfgerr">Item cannot be added to cart due to price not set.</err>
2410: <err id="9102" type="cfgerr">could not lookup pogs</err>
2411: <err id="9103" type="cfgerr">Some of the items in this kit are not available for purchase: </err>
2412: <err id="9000" type="cfgerr">Unhandled item detection error</err>
2413: <err id="9001" type="cfgerr">Product xyz is no longer available</err>
2414: <err id="9002" type="cfgerr">Product xyz has already been purchased</err>
2415: </errors>
2416: 
2417: </API>
2418: 
2419: <API id="appProductList">
2420: <purpose>deprecated</purpose>
2421: <concept>PRODUCT,PRODUCT_SELECTOR</concept>
2422: <input id="src">navcat:.path.to.safename</input>
2423: <input id="src">search:keywords</input>
2424: <input id="src">cart:</input>
2425: <response id="@products">['pid1','pid2','pid3']</response>
2426: </API>
2427: 
2428: <API id="appProductSelect">
2429: <purpose></purpose>
2430: <input id="product_selector">
2431: navcat=.path.to.safename
2432: CSV=pid1,pid2,pid3
2433: CREATED=STARTYYYMMDD|ENDYYYMMDD
2434: RANGE=pid1|pid2
2435: MANAGECAT=/managecat
2436: SEARCH=keyword
2437: PROFILE=PROFILE
2438: </input>
2439: <response id="@products">['pid1','pid2','pid3']</response>
2440: </API>
2441: 
2442: 
2443: <API id="getKeywordAutoComplete">
2444: <purpose>returns a list of matching possible keywords (note: currently disabled pending rewrite)</purpose>
2445: <input id="_cartid"></input>
2446: <input id="keywords"></input>
2447: <input id="catalog"></input>
2448: <hint>
2449: pass value of catalog=TESTING to always generate an auto-complete result
2450: </hint>
2451: 
2452: </API>
2453: 
2454: <API id="searchResult">
2455: <purpose></purpose>
2456: <input id="_cartid"></input>
2457: <input hint="Required" id="KEYWORDS"></input>
2458: <input hint="Recommended" id="MODE">EXACT|STRUCTURED|AND|OR</input>
2459: <input hint="Recommended" id="CATALOG"></input>
2460: <input hint="Override" id="PRT">0</input>
2461: <input hint="Override" id="ISOLATION_LEVEL">0-9</input>
2462: <input hint="Override" id="ROOT">.</input>
2463: <input hint="Diagnostic" id="LOG">1</input>
2464: <input hint="Diagostic" id="TRACEPID">productid</input>
2465: <response id="@products">an array of product ids</response>
2466: <response id="@LOG">an array of strings explaining how the search was performed (if LOG=1 or TRACEPID non-blank)</response>
2467: <caution>
2468: Using LOG=1 or TRACEPID in a product (non debug) environment will result in the search feature being
2469: disabled on a site.
2470: </caution>
2471: 
2472: </API>
2473: 
2474: <API id="getSearchCatalogs">
2475: <purpose></purpose>
2476: <input id="_cartid"></input>
2477: </API>
2478: 
2479: <API id="appPublicSearch">
2480: <purpose></purpose>
2481: <input id="_cartid"></input>
2482: <input id="type">product|faq|blog</input>
2483: <input id="type">['product','blog']</input>
2484: <note>if not specified then: type:_all is assumed.</note>
2485: <note>www.elasticsearch.org/guide/reference/query-dsl/</note>
2486: 
2487: <input id="mode">elastic-native</input>
2488: <input hint="mode:elastic-native" id="filter"> { 'term':{ 'profile':'DEFAULT' } };</input>
2489: <input hint="mode:elastic-native" id="filter"> { 'term':{ 'profile':['DEFAULT','OTHER'] } };	## invalid: a profile can only be one value and this would fail</input>
2490: <input hint="mode:elastic-native" id="filter"> { 'or':{ 'filters':[ {'term':{'profile':'DEFAULT'}},{'term':{'profile':'OTHER'}}  ] } };</input>
2491: <input hint="mode:elastic-native" id="filter"> { 'constant_score'=>{ 'filter':{'numeric_range':{'base_price':{"gte":"100","lt":"200"}}}};</input>
2492: <input hint="mode:elastic-native" id="query"> {'text':{ 'profile':'DEFAULT' } };</input>
2493: <input hint="mode:elastic-native" id="query"> {'text':{ 'profile':['DEFAULT','OTHER'] } }; ## this would succeed, </input>
2494: 
2495: <response id="size">100 # number of results</response>
2496: <response id="sort">['_score','base_price','prod_name']</response>
2497: <response id="from">100	# start from result # 100</response>
2498: <response id="scroll">30s,1m,5m</response>
2499: 
2500: <note>
2501: <![CDATA[
2502: Filter is an exact match, whereas query is a token/substring match - filter is MUCH faster and should be used
2503: when the exact value is known (ex: tags, profiles, upc, etc.)
2504: 
2505: <ul> KNOWN KEYS:
2506: * pid
2507: * skus: [ 'PID:ABCD', 'PID:ABCE' ]
2508: * options : [ 'Size: Large', 'Size: Medium', 'Size: Small' ]
2509: * pogs: [ 'AB', 'ABCD', 'ABCE' ]
2510: * tags: [ IS_FRESH, IS_NEEDREVIEW, IS_HASERRORS, IS_CONFIGABLE, IS_COLORFUL, IS_SIZEABLE, IS_OPENBOX, IS_PREORDER, IS_DISCONTINUED, IS_SPECIALORDER, IS_BESTSELLER, IS_SALE, IS_SHIPFREE, IS_NEWARRIVAL, IS_CLEARANCE, IS_REFURB, IS_USER1, ..]
2511: * images: [ 'path/to/image1', 'path/to/image2' ]
2512: * ean, asin, upc, fakeupc, isbn, prod_mfgid
2513: * accessory_products: [ 'PID1', 'PID2', 'PID3' ]
2514: * related_products: [ 'PID1', 'PID2', 'PID3' ]
2515: * base_price: amount*100 (so $1.00 = 100)
2516: * keywords: [ 'word1', 'word2', 'word3' ]
2517: * assembly: [ 'PID1', 'PID2', 'PID3' ],
2518: * prod_condition: [ 'NEW', 'OPEN', 'USED', 'RMFG', 'RFRB', 'BROK', 'CRAP' ]
2519: * prod_name, description, detail
2520: * prod_features
2521: * prod_is
2522: * prod_mfg
2523: * profile
2524: * salesrank
2525: </ul>
2526: ]]>
2527: </note>
2528: 
2529: <response id="@products">an array of product ids</response>
2530: <response id="@LOG">an array of strings explaining how the search was performed (if LOG=1 or TRACEPID non-blank)</response>
2531: <caution>
2532: Using LOG=1 or TRACEPID in a product (non debug) environment will result in the search feature being
2533: disabled on a site.
2534: </caution>
2535: 
2536: </API>
2537: 
2538: <API id="appProductGet">
2539: <purpose></purpose>
2540: <input id="_cartid"></input>
2541: <input id="pid">productid</input>
2542: <input id="ver">version#</input>
2543: <input id="withVariations">1</input>
2544: <input id="withInventory">1</input>
2545: <input id="withSchedule">1</input>
2546: <note>NOT IMPLEMENTED: navcatsPlease=1 = showOnlyCategories=1</note>
2547: <example>
2548: [
2549: 	'pid' : product-id,
2550: 	'%attribs' : [ 'zoovy:prod_name'=>'xyz' ],
2551: 	'@variations' : [ JSON POG OBJECT ],
2552: 	'@inventory' : [ 'sku1' : [ 'inv':1, 'res':2 ], 'sku2' : [ 'inv':3, 'res':4 ] ],
2553: ]
2554: </example>
2555: <caution>
2556: This does not apply schedule pricing.
2557: </caution>
2558: <hint>
2559: to tell if a product exists check the value "zoovy:prod_created_gmt".
2560: It will not exist, or be set to zero if the product has been deleted or does not exist OR is not 
2561: accessible on the current partition.
2562: </hint>
2563: </API>
2564: 
2565: <API id="appProductCategories">
2566: <purpose></purpose>
2567: <input id="_cartid"></input>
2568: <input id="pid">productid</input>
2569: <input id="showOnlyCategories">1</input>
2570: <input id="detail">less</input>
2571: 
2572: <response id="@categories">[ '.safe.path.1', '.safe.path.2' ];</response>
2573: 
2574: </API>
2575: 
2576: <API id="appReviewAdd">
2577: <purpose></purpose>
2578: <input id="_cartid"></input>
2579: <input id="pid">productid</input>
2580: <input id="SUBJECT"></input>
2581: <input id="RATING"></input>
2582: <input id="CUSTOMER_NAME"></input>
2583: <input id="LOCATION"></input>
2584: <input id="SUBJECT"></input>
2585: <input id="MESSAGE"></input>
2586: <input id="BLOG_URL"></input>
2587: </API>
2588: 
2589: <API id="appReviewsList">
2590: <purpose></purpose>
2591: <input id="_cartid"></input>
2592: <input id="pid">productid</input>
2593: </API>
2594: 
2595: <API id="appCaptchaGet">
2596: <purpose></purpose>
2597: <input id="_cartid"></input>
2598: <errors>
2599: <err id="10000" type="apperr">Profile %s could not be loaded.</err>
2600: <err id="10001" type="apperr">Profile request was blank/empty.</err>
2601: <err id="10002" type="apperr">No profile was requested.</err>
2602: </errors>
2603: <note>***** NOT FINISHED ****</note>
2604: </API>
2605: 
2606: <API id="buyerNotificationAdd">
2607: <purpose>Used to register a buyer for a notification when a inventory is back in stock.</purpose>
2608: <input id="_cartid"></input>
2609: <input id="type">inventory</input>
2610: <input hint="type:inventory" id="email">user@somedomain.com</input>
2611: <input hint="type:inventory" id="sku"></input>
2612: <input hint="type:inventory" id="msgid"></input>
2613: </API>
2614: 
2615: <API id="appGiftcardValidate">
2616: <purpose></purpose>
2617: <caution>a single ip is limited to 25 requests in a 24 hour period.</caution>
2618: <input id="giftcard"></input>
2619: </API>
2620: 
2621: <API id="cartPaymentQ">
2622: <purpose>Manipulate or display the PaymentQ (a list of payment types for a given cart/order)</purpose>
2623: <input id="cmd" required="1">reset|delete|insert|sync</input>
2624: <input id="ID" optional="0">required for cmd=delete|insert</input>
2625: <input id="TN" optional="0">required for cmd=insert ex: CASH|CREDIT|PO|etc.</input>
2626: <input id="$$" optional="0">optional for cmd=insert (max to charge on this payment method)</input>
2627: <input id="TWO_DIGIT_TENDER_VARIABLES" optional="0">required for cmd=insert, example: CC, MM, YY, CV for credit card</input>
2628: <response id="paymentQ[].ID">unique id # for this</response>
2629: <response id="paymentQ[].TN">ex: CASH|CREDIT|ETC.</response>
2630: <response id="paymentQ[].OTHER_TWO_DIGIT_TENDER_VARIABLES"></response>
2631: </API>
2632: 
2633: <API id="cartGiftcardAdd">
2634: <purpose></purpose>
2635: <input id="_cartid"></input>
2636: <input id="giftcard"></input>
2637: </API>
2638: 
2639: <API id="cartCouponAdd">
2640: <purpose></purpose>
2641: <input id="_cartid"></input>
2642: <input id="coupon"></input>
2643: </API>
2644: 
2645: <API id="cartPromoCodeAdd">
2646: <purpose></purpose>
2647: <note>A promo code can be either a giftcard, or a coupon (we'll detect which it is)</note>
2648: <input id="_cartid"></input>
2649: <input id="promocode"></input>
2650: </API>
2651: 
2652: <API id="appEmailSend">
2653: <purpose></purpose>
2654: <caution>a single ip is limited to 25 emails in a 24 hour period.</caution>
2655: <input id="_cartid"></input>
2656: <input id="method">tellafriend</input>
2657: <input hint="method:tellafriend" id="product">productid</input>
2658: <input hint="method:tellafriend" id="recipient">user@someotherdomain.com</input>
2659: </API>
2660: 
2661: <API id="buyerProductLists">
2662: <purpose></purpose>
2663: <input id="_cartid"></input>
2664: <example>
2665: @lists = [
2666: 	[ LISTID:listid1, ITEMS:# ],
2667: 	[ LISTID:listid2, ITEMS:# ],
2668: 	]
2669: </example>
2670: </API>
2671: 
2672: <API id="buyerProductListDetail">
2673: <purpose></purpose>
2674: <input id="_cartid"></input>
2675: listid:
2676: <example>
2677: @listid = [
2678: 	[ SKU:sku1, QTY:#, NOTE:"", PRIORITY:"", MODIFIED_TS:"YYYY-MM-DD HH:MM:SS" ],
2679: 	[ SKU:sku1, QTY:#, NOTE:"", PRIORITY:"", MODIFIED_TS:"YYYY-MM-DD HH:MM:SS" ],
2680: 	]
2681: </example>
2682: </API>
2683: 
2684: <API id="buyerProductListAppendTo">
2685: <purpose></purpose>
2686: <input id="_cartid"></input> 
2687: listid=
2688: sku=
2689: OPTIONAL:
2690: 	qty=(will default to zero)
2691: 	priority=# (will defualt to zero)
2692: 	note=	(optional string up to 255 characters)
2693: 	replace=1	(will delete any existing value from the list, and re-add this one)
2694: </API>
2695: 
2696: 
2697: <API id="buyerProductListRemoveFrom">
2698: <purpose></purpose>
2699: <input id="_cartid"></input>
2700: listid=
2701: sku=
2702: </API>
2703: 
2704: <API id="buyerAddressList">
2705: <purpose></purpose>
2706: <input id="_cartid"></input>
2707: Returns:
2708: <CODE>
2709: @bill : [
2710: 	... format may change ...
2711: 	]
2712: @ship : [
2713: 	... format may change ...
2714: 	]
2715: </CODE>
2716: </API>
2717: 
2718: <API id="buyerAddressAddUpdate">
2719: <purpose></purpose>
2720: <input id="_cartid"></input>
2721: <notes>
2722: <![CDATA[
2723: shortcut:tag for this address ex: 'HOME' (must be unique within bill or ship)
2724: 
2725: type:bill
2726: 	bill/countrycode:US
2727: 	bill/email:user@domain
2728: 	bill/firstname:
2729: 	bill/lastname:
2730: 	bill/fullname:
2731: 	bill/phone:
2732: 	bill/state:
2733: 	bill/zip: 
2734: 
2735: type:ship    
2736: 	ship/address1:
2737: 	ship/address2:
2738: 	ship/city:
2739: 	ship/countrycode:US
2740: 	ship/fullname:
2741: 	ship/firstname:
2742: 	ship/lastname:
2743: 	ship/phone:
2744: 	ship/region:
2745: 	ship/postal:
2746: 
2747: NOTE: (fullname) or (firstname lastname)
2748: NOTE: (country) or (countrycode) 
2749: ]]>
2750: </notes>
2751: </API>
2752: 
2753: <API id="buyerAddressDelete">
2754: <purpose></purpose>
2755: <concept>buyer</concept>
2756: <input id="_cartid"></input>
2757: Returns:
2758: <CODE>
2759: type:SHIP|BILL
2760: shortcut:DEFAULT
2761: </CODE>
2762: </API>
2763: 
2764: <API id="buyerWalletList">
2765: <concept>wallet</concept>
2766: <concept>buyer</concept>
2767: <purpose>Displays a list of wallets</purpose>
2768: <output id="@wallets">an array of wallets
2769: </output>
2770: <code type="json" title="@wallets sample output">
2771: [
2772: 	{ ID:walletid1, IS_DEFAULT:1|0, DESCRIPTION:description },
2773: 	{ ID:walletid2, IS_DEFAULT:1|0, DESCRIPTION:description },
2774: 	{ ID:walletid3, IS_DEFAULT:1|0, DESCRIPTION:description },
2775: ]
2776: </code>
2777: </API>
2778: 
2779: <API id="buyerWalletAdd">
2780: <concept>wallet</concept>
2781: <purpose>creates a new wallet for the associated buyer</purpose>
2782: <input id="CC">Credit Card #</input>
2783: <input id="YY">2 Digit Year</input>
2784: <input id="MM">2 Digit Month</input>
2785: <input id="IP">4 digit numeric ip address</input>
2786: <output id="ID">wallet id # (on success)</output>
2787: </API>
2788: 
2789: <API id="buyerWalletDelete">
2790: <purpose></purpose>
2791: <input id="_cartid"></input>
2792: walletid:#####
2793: </API>
2794: 
2795: <API id="buyerWalletSetPreferred">
2796: <purpose></purpose>
2797: <input id="_cartid"></input>
2798: walletid:#####
2799: </API>
2800: 
2801: <API id="appBuyerLogin">
2802: <purpose></purpose>
2803: <input id="method">unsecure</input>
2804: <input id="login">email address</input>
2805: <input id="password">clear text password</input>
2806: <output id="cid">customer id</output>
2807: <output id="schedule">schedule</output>
2808: </API>
2809: 
2810: <API id="appBuyerDeviceRegistration">
2811: <purpose>verify or create a client registration</purpose>
2812: <input id="verb">verifyonly|create</input>
2813: <input id="deviceid">client generated device key (guid), or well known identifier from device</input>
2814: <input id="os">android|appleios</input>
2815: <input optional="1" id="devicetoken">devicetoken (appleios) or registrationid (android) is required 
2816: 	(to avoid religious debatesboth are equivalent -- either is acceptable)</input>
2817: <input optional="1" id="registrationid">devicetoken (appleios) or registrationid (android) is required 
2818: 	(to avoid relgious debates, both are equivalent -- either is acceptable)</input>
2819: <input optional="1" id="email">email registration is insecure and may not always be available</input>
2820: <output id="CID">client id</output>
2821: </API>
2822: 
2823: <API id="appBuyerCreate">
2824: <purpose>
2825: create a buyer account (currently requires form=wholesale)
2826: long term goal is to support flexible *per project* account signups w/parameters
2827: </purpose>
2828: <input id="form">wholesale</input>
2829: <note>
2830: See adminCustomerUpdate for a full list of macros
2831: </note>
2832: </API>
2833: 
2834: <API id="appBuyerExists">
2835: <purpose></purpose>
2836: <input id="_cartid"></input>
2837: login=email address
2838: 
2839: buyer: returns a positive number if buyer exists, or zero if it does not.
2840: 
2841: </API>
2842: 
2843: <API id="buyerPasswordUpdate">
2844: <purpose></purpose>
2845: <input id="_cartid"></input>
2846: 
2847: password:newpassword
2848: 
2849: </API>
2850: 
2851: <API id="buyerOrderUpdate">
2852: <purpose>
2853: A macro is a set of commands that will be applied to an order, they are useful because they are applied (whenever possible)
2854: as a single atomic transaction. buyers have access to a subset of macros from full order processing, but enough to adjust
2855: payment, and in some cases cancel orders.
2856: </purpose>
2857: <input id="_cartid"></input>
2858: <input id="orderid">2012-01-1234</input>
2859: <input id="@updates">see example below</input>
2860: <note>
2861: This uses the same syntax as adminOrderUpdate, but only a subset are supported (actually at this point ALL commands are supported, but we'll restrict this eventually), 
2862: and may (eventually) differ based on business logic and/or add some custom ones. 
2863: </note>
2864: <example>
2865: @updates:[
2866: 	'cmd',
2867: 	'cmd?some=param',
2868: 	]
2869: </example>
2870: <example>
2871: Allowed commands:
2872: ADDNOTE
2873: </example>
2874: 
2875: </API>
2876: 
2877: <API id="buyerOrderPaymentAdd">
2878: <purpose>
2879: Adds and processes a new payment transaction on an order.
2880: </purpose>
2881: <input id="_cartid"></input>
2882: <input id="orderid">2012-01-1234</input>
2883: <input id="tender">CREDIT</input>
2884: <input id="amt">(optional - will default to order balance_due) transaction amount</input>
2885: <input id="uuid">(optional - will be autogenerated if not supplied) unique identifier for this transaction</input>
2886: <input id="payment.cc">(required on tender=CREDIT) Credit card #</input>
2887: <input id="payment.yy">(required on tender=CREDIT) Credit card Expiration Year</input>
2888: <input id="payment.mm">(required on tender=CREDIT) Credit card Expiration Month</input>
2889: <input id="payment.cv">(required on tender=CREDIT) Credit card CVV/CID #</input>
2890: 
2891: </API>
2892: 
2893: <API id="buyerOrderGet">
2894: <purpose>
2895: Grabs a raw order object (buyer perspective) so that status information can be displayed. 
2896: </purpose>
2897: <input id="_cartid"></input>
2898: <hint>In order to access an order status the user must either be an authenticated buyer, OR use softauth=order with
2899: cartid + either orderid or erefid</hint>
2900: <input id="softauth">order</input>
2901: <input id="erefid">(conditionally-required for softauth=order) external reference identifier (ex: ebay sale #) or amazon order #</input>
2902: <input id="orderid">(conditionally-required for softauth=order) internal zoovy order #</input>
2903: <input id="cartid">(conditionally-required for softauth=order) internal cartid #</input>
2904: <input id="orderid">(required for softauth=order) original cart session id</input>
2905: </API>
2906: 
2907: <API id="buyerTicketList">
2908: <purpose>
2909: shows a list of ticket for a buyer
2910: </purpose>
2911: <input id="_cartid"></input>
2912: </API>
2913: 
2914: <API id="buyerTicketCreate">
2915: <purpose>
2916: creates a new ticket for a customer
2917: </purpose>
2918: <input id="_cartid"></input>
2919: 
2920: </API>
2921: 
2922: <API id="buyerTicketUpdate">
2923: <purpose>
2924: updates a ticket for a buyer
2925: </purpose>
2926: <input id="_cartid"></input>
2927: </API>
2928: 
2929: <API id="buyerLogout">
2930: <purpose></purpose>
2931: <input id="_cartid"></input>
2932: </API>
2933: 
2934: <API id="appBuyerPasswordRecover">
2935: <purpose></purpose>
2936: <input id="_cartid"></input>
2937: <input id="login"></input>
2938: <input id="method">email</input>
2939: </API>
2940: 
2941: <API id="adminOrderPaymentMethods">
2942: <purpose>
2943: displays a list of payment methods available for an order (optional), there are a few scenarios where things
2944: get wonky.
2945: first - if the logged in user is admin, then additional methods like cash, check, all become available (assuming they are
2946: enabled).
2947: second - if the order has a zero dollar total, only ZERO will be returned.
2948: third - if the order has giftcards, no paypalec is available. (which is fine, because paypalec is only available for the client)
2949: fourth - if the order has paypalec payment (already) then other methods aren't available, because paypal doesn't support mixing and matching payment types.
2950: </purpose>
2951: <input id="_cartid"></input>
2952: <input optional="1" id="orderid">orderid #</input>
2953: <input optional="1" id="customerid">customerid #</input>
2954: <input optional="1" id="country">ISO country cod</input>
2955: <input optional="1" id="ordertotal">#####.##</input>
2956: 
2957: <response id="@methods"></response>
2958: <example>
2959: @methods = [
2960: 	[ id:"method", pretty:"pretty title", fee:"##.##" ],
2961: 	[ id:"method", pretty:"pretty title", fee:"##.##" ]
2962: 	]
2963: </example>
2964: 
2965: 
2966: </API>
2967: 
2968: <API id="appPaymentMethods">
2969: <purpose></purpose>
2970: <input id="_cartid"></input>
2971: <input optional="1" id="country">ISO country cod</input>
2972: <input optional="1" id="ordertotal">#####.##</input>
2973: 
2974: <response id="@methods"></response>
2975: <example>
2976: @methods = [
2977: 	[ id:"method", pretty:"pretty title", fee:"##.##" ],
2978: 	[ id:"method", pretty:"pretty title", fee:"##.##" ]
2979: 	]
2980: </example>
2981: 
2982: 
2983: </API>
2984: 
2985: <API id="appCheckoutDestinations">
2986: <purpose></purpose>
2987: <input id="_cartid"></input>
2988: <example>
2989: @destinations = [
2990: 	[ z:"Pretty Name", iso:"US", isox:"USA" ],
2991: 	[ z:"Pretty Name", iso:"US", isox:"USA" ],
2992: 	]
2993: </example>
2994: </API>
2995: 
2996: <API id="cartPaypalSetExpressCheckout">
2997: <purpose></purpose>
2998: <input id="_cartid"></input>
2999: <input id="getBuyerAddress"> 0|1 (if true - paypal will ask shopper for address)</input>
3000: <input id="cancelURL"> ''   (required, but may be blank for legacy checkout)</input>
3001: <input id="returnURL"> ''	 (required, but may be blank for legacy checkout)</input>
3002: 
3003: <input optional="1" id="useShippingCallbacks"> 0|1 (if true - forces shipping callbacks,
3004: generates an error when giftcards are present and shipping is not free) 
3005: if set to zero, then store settings (enable/disabled) will be used.
3006: </input>
3007: 
3008: <response id="URL">url to redirect checkout to (checkout will finish with legacy method, but you CAN build your own)</response>
3009: <response id="TOKEN">paypal token</response>
3010: <response id="ACK">paypal "ACK" message</response>
3011: <response id="ERR">(optional message from paypal api)</response>
3012: <response id="_ADDRESS_CHANGED">1|0</response>
3013: <response id="_SHIPPING_CHANGED">methodid (the new value of CART->ship.selected_id)</response>
3014: 
3015: </API>
3016: 
3017: <API id="cartGoogleCheckoutURL">
3018: <purpose></purpose>
3019: <input id="_cartid"></input>
3020: <input id="analyticsdata"> (required, but may be blank) obtained by calling getUrchinFieldValue() 
3021: in the pageTracker or _gaq Google Analytics object.
3022: </input>
3023: <input id="edit_cart_url"></input>
3024: <input id="continue_shopping_url"></input>
3025: 
3026: <hint>
3027: <![CDATA[
3028: Google has extensive documentation on it's checkout protocols, you need use buttons served by google.
3029: MORE INFO: http://code.google.com/apis/checkout/developer/index.html#google_checkout_buttons
3030: 
3031: NOTE: googleCheckoutMerchantId is passed in the config.js if it's blank, the configuration is incomplete and don't
3032: try using it as a payment method.
3033: 
3034: To select a button you will need to know the merchant id (which is returned by this call), the style and
3035: variant type of the button. Examples are provided below so hopefully you can skip reading it! 
3036: You must use their button(s). Possible: style: white|trans, Possible variant: text|disable
3037: ]]>
3038: </hint>
3039: 
3040: <caution>
3041: <![CDATA[
3042: note: if one or more items in the cart has 'gc:blocked' set to true - then google checkout button must be
3043: shown as DISABLED using code below:
3044: https://checkout.google.com/buttons/checkout.gif?merchant_id=[merchantid]&w=160&h=43&style=[style]&variant=[variant]&loc=en_US
3045: 
3046: These are Googles branding guidelines, hiding the button (on a website) can lead to stern reprimand and even termination from 
3047: Google programs such as "trusted merchant".
3048: ]]>
3049: </caution>
3050: 
3051: <hint>
3052: <![CDATA[
3053: Here is example HTML that would be used with the Asynchronous Google Analytics tracker (_gaq).
3054: 
3055: <a href="javascript:_gaq.push(function() {
3056:    var pageTracker = _gaq._getAsyncTracker();setUrchinInputCode(pageTracker);});
3057:    document.location='$googlecheckout_url?analyticsdata='+getUrchinFieldValue();">
3058: <img height=43 width=160 border=0 
3059: 	src="https://checkout.google.com/buttons/checkout.gif?merchant_id=[merchantid]&w=160&h=43&style=[style]&variant=[variant]&loc=en_US"
3060: 	></a>
3061: ]]>
3062: </hint>
3063: 
3064: <response id="googleCheckoutMerchantId"></response>
3065: <response id="URL"></response>
3066: 
3067: </API>
3068: 
3069: <API id="cartAmazonPaymentURL">
3070: <purpose></purpose>
3071: <input id="_cartid"></input>
3072: <input id="shipping"> 1|0 	(prompt for shipping address)</input>
3073: <input id="CancelUrl"> URL to redirect user to if cancel is pressed.</input>
3074: <input id="ReturnUrl"> URL to redirect user to upon order completion</input>
3075: <input id="YourAccountUrl"> URL where user can be directed to by amazon if they wish to lookup order status. (don't stree about this, rarely used)</input>
3076: 
3077: <hint>
3078: <![CDATA[
3079: Returns parameters necessary for CBA interaction:
3080: 
3081: merchantid: the checkout by amazon assigned merchantid (referred to as [merchantid] in the example below)
3082: b64xml: a base64 encoded xml order object based on the current cart geometry referred to as [b64xml], BUT passed to amazon following "order:"
3083: signature: a sha1, base64 encoded concatenation of the b64xml and the configured cba secret key refrerred to as [signature] in the example below, AND passed to amazon following "signature:"
3084: aws-access-key-id: a public string cba needs to identify this merchant refrred to as [aws-access-key-id] AND passed to amazon following the "aws-access-key-id:" parameter
3085: 
3086: To generate/create a payment button, suggested parameters are: color: orange, size: small, background: white
3087: https://payments.amazon.com/gp/cba/button?ie=UTF8&color=[color]&background=[background]&size=[size]
3088: ex:
3089: https://payments.amazon.com/gp/cba/button?ie=UTF8&color=orange&background=white&size=small
3090: Use this as the **your button image url** in the example.
3091: 
3092: The [formurl] is created by the developer using the merchant id, specify either sandbox or non-sandbox (live):
3093: https://payments.amazon.com/checkout/[merchantid]
3094: https://payments-sandbox.amazon.com/checkout/[merchantid]?debug=true
3095: ]]>
3096: </hint>
3097: 
3098: <example title="Example"><![CDATA[
3099: 
3100: &lt;!- NOTE: you do NOT need to include jquery if you already are using jquery -&gt;
3101: <script type="text/javascript" src="https://images-na.ssl-images-amazon.com/images/G/01/cba/js/jquery.js"></script>
3102: 
3103: <script type="text/javascript" src="https://images-na.ssl-images-amazon.com/images/G/01/cba/js/widget/widget.js"></script>
3104: <form method=POST action="https://payments.amazon.com/checkout/[merchantid]">
3105: <input type="hidden" name="order-input" value="type:merchant-signed-order/aws-accesskey/1;order:[b64xml];signature:[signature];aws-access-key-id:[aws-access-key-id]">
3106: <input type="image" id="cbaImage" name="cbaImage" src="**your button image url**" onClick="this.form.action='[formurl]'; checkoutByAmazon(this.form)">
3107: </form>
3108: 
3109: ]]>
3110: </example>
3111: 
3112: </API>
3113: 
3114: <API id="cartSet">
3115: <purpose></purpose>
3116: <input id="_cartid"></input>
3117: </API>
3118: 
3119: <API id="cartCSRShortcut">
3120: <purpose>Returns a 4-6 digit authorization token that can be used by a 
3121: call center operator to identify a session.  CSR shortcuts are only valid for approximately 10 minutes.</purpose>
3122: <input id="_cartid"></input>
3123: <output id="csr"></output>
3124: </API>
3125: 
3126: <API id="adminCSRLookup">
3127: <purpose>Lookups a 4-6 digit code</purpose>
3128: <input id="csr"></input>
3129: <input id="cartid"></input>
3130: </API>
3131: 
3132: 
3133: cart.change	: a message informing either side the cart has changed and should be reloaded
3134: 
3135: chat.join	: should be posted whenever a person enters a channel
3136: chat.post	: you know, a message to be displayed
3137: chat.exit	: posted whenever somebody leaves
3138: 
3139: view.product	: to indicate the client is viewing a product
3140: view.category	:   viewing category
3141: view.search     : 	viewing search
3142: 
3143: goto.product : a suggestion (which could be taken by the app as a direction) to navigate to the product
3144: goto.category
3145: goto.search
3146: goto.url
3147: 
3148: SEQ
3149: SINCE
3150: 
3151: <API id="cartShippingMethods">
3152: <purpose></purpose>
3153: <input id="_cartid"></input>
3154: <input id="trace">0|1	(optional)</input>
3155: <input id="update">0|1 (optional - defaults to 0): set the shipping address, etc. in the cart to the new values.</input>
3156: 
3157: <hint>
3158: in cart the following pieces of data must be set:
3159: 	data.ship_address
3160: 	data.ship_country
3161: 	data.ship_zip
3162: 	data.ship_state
3163: </hint>
3164: <example>
3165: @methods = [
3166: 	[ id:, name:, carrier:, amount
3167: 	]
3168: </example>
3169: 
3170: </API>
3171: 
3172: <API id="cartItemsInventoryVerify">
3173: <purpose></purpose>
3174: <input id="_cartid"></input>
3175: <input id="trace">0|1	(optional)</input>
3176: <example>
3177: %changes = [
3178: 	[ sku1: newqty, sku2:newqty ]
3179: 	]
3180: </example>
3181: </API>
3182: 
3183: <API id="cartOrderCreate">
3184: <purpose></purpose>
3185: <input id="_cartid"></input>
3186: <response id="iama"> some string that makes sense to you</response>
3187: <response id="orderid"> 2011-01-1234</response>
3188: <response id="payment"> </response>
3189: 
3190: </API>
3191: 
3192: <API id="adminPrivateSearch">
3193: <purpose></purpose>
3194: <input id="_cartid"></input>
3195: <input id="type">order</input>
3196: <input id="type">['order']</input>
3197: <note>if not specified then: type:_all is assumed.</note>
3198: <note>www.elasticsearch.org/guide/reference/query-dsl/</note>
3199: 
3200: <input id="mode">elastic-native</input>
3201: <input hint="mode:elastic-native" id="filter"> { 'term':{ 'profile':'DEFAULT' } };</input>
3202: <input hint="mode:elastic-native" id="filter"> { 'term':{ 'profile':['DEFAULT','OTHER'] } };	## invalid: a profile can only be one value and this would fail</input>
3203: <input hint="mode:elastic-native" id="filter"> { 'or':{ 'filters':[ {'term':{'profile':'DEFAULT'}},{'term':{'profile':'OTHER'}}  ] } };</input>
3204: <input hint="mode:elastic-native" id="filter"> { 'constant_score'=>{ 'filter':{'numeric_range':{'base_price':{"gte":"100","lt":"200"}}}};</input>
3205: <input hint="mode:elastic-native" id="query"> {'text':{ 'profile':'DEFAULT' } };</input>
3206: <input hint="mode:elastic-native" id="query"> {'text':{ 'profile':['DEFAULT','OTHER'] } }; ## this would succeed, </input>
3207: 
3208: <response id="size">100 # number of results</response>
3209: <response id="sort">['_score','base_price','prod_name']</response>
3210: <response id="from">100	# start from result # 100</response>
3211: <response id="scroll">30s,1m,5m</response>
3212: 
3213: <note>
3214: <![CDATA[
3215: Filter is an exact match, whereas query is a token/substring match - filter is MUCH faster and should be used
3216: when the exact value is known (ex: tags, profiles, upc, etc.)
3217: 
3218: <ul> KNOWN KEYS:
3219: 
3220: </ul>
3221: ]]>
3222: </note>
3223: 
3224: <response id="@products">an array of product ids</response>
3225: <response id="@LOG">an array of strings explaining how the search was performed (if LOG=1 or TRACEPID non-blank)</response>
3226: <caution>
3227: Using LOG=1 or TRACEPID in a product (non debug) environment will result in the search feature being
3228: disabled on a site.
3229: </caution>
3230: 
3231: </API>
3232: 
3233: <API id="adminPartnerSet">
3234: <purpose></purpose>
3235: <input id="partner">EBAY</input>
3236: <note>
3237: <![CDATA[
3238: Generic call to save data retrieved from partner return URL's, parameters vary.
3239: ]]>
3240: </note>
3241: </API>
3242: 
3243: <API id="adminPartnerGet">
3244: <purpose></purpose>
3245: <input id="partner">EBAY</input>
3246: <note>
3247: <![CDATA[
3248: ]]>
3249: </note>
3250: </API>
3251: 
3252: <API id="adminOrderCreate">
3253: <purpose></purpose>
3254: <input id="_cartid"></input>
3255: <response id="orderid"> 2011-01-1234</response>
3256: <response id="payment"> </response>
3257: 
3258: </API>
3259: 
3260: <API id="cartCheckoutValidate">
3261: <purpose></purpose>
3262: <input id="_cartid"></input>
3263: <input id="sender"> stage (LOGIN,BILLING_LOCATION,SHIPPING_LOCATION,ORDER_CONFIRMATION,ADMIN)</input>
3264: <response id="@issues"></response>
3265: </API>
3266: 
3267: 
3268: <API id="appNewsletterList">
3269: <purpose>shows all publically available newsletters/lists</purpose>
3270: </API>
3271: 
3272: <API id="adminNewsletterList">
3273: <purpose>see appNewsletterList, unlike public call also show hidden and not provisioned newsletters</purpose>
3274: </API>
3275: 
3276: <API id="buyerNewsletters">
3277: <purpose></purpose>
3278: <input id="_cartid"></input>
3279: <input id="login"> email address</input>
3280: <input id="fullname"> (optional)</input>
3281: <input id="newsletter-1"> 1/0</input>
3282: <input id="newsletter-2"> 1/0</input>
3283: <caution>
3284: This can ONLY be used to subscribe new users who don't have accounts.
3285: </caution>
3286: 
3287: </API>
3288: 
3289: <API id="getMerchandising">
3290: <purpose></purpose>
3291: <input id="_cartid"></input>
3292: <input optional="1" id="category"> .some.path|.some.other.path</input>
3293: <input optional="1" id="tags"> x|y|z</input>
3294: <input optional="1" id="keywords">	word1|word2|word3</input>
3295: 
3296: <example>
3297: 	@ELEMENTS = [
3298: 		{ id=>'xyz', trigger=>'category:.some.path', format=>'image', .. element specific data .. },
3299: 	];
3300: </example>
3301: 
3302: 
3303: myControl.registerMerchandizerificURL("/jsonapi", formatResponseFunction); 
3304: myControl.registerMerchandizerificURL("putContentHereElement", "http://domain.com/someurl/handler",
3305: 	["keywords","/xyz*/"], 
3306: 	"targetElement");
3307: myControl.registerMerchandizerific(function {},"category","/.*?/");
3308: myControl.registerMerchandizerific("/","category","/accessories\..*?/");
3309: 
3310: 
3311: 
3312: </API>
3313: 
3314: <API id="buyerPurchaseHistory">
3315: <purpose></purpose>
3316: <input id="_cartid"></input>
3317: <input optional="1" id="POOL"> RECENT,COMPLETED, etc.</input>
3318: <input optional="1" id="TS"> modified timestamp from</input>
3319: <input optional="1" id="CREATED_GMT"> created since ts</input>
3320: <input optional="1" id="CREATEDTILL_GMT"> created since ts</input>
3321: <input optional="1" id="PAID_GMT"> paid since</input>
3322: <input optional="1" id="PAIDTILL_GMT"> paid until ts</input>
3323: <input optional="1" id="PAYMENT_STATUS"> </input>
3324: <input optional="1" id="PAYMENT_METHOD"> tender type (ex: CREDIT)</input>
3325: <input optional="1" id="SDOMAIN"> </input>
3326: <input optional="1" id="MKT">  a report by market (use bitwise value)</input>
3327: <input optional="1" id="EREFID"> </input>
3328: <input optional="1" id="LIMIT"> max record sreturns</input>
3329: <input optional="1" id="CUSTOMER">  the cid of a particular buyer.</input>
3330: <input optional="1" id="DETAIL">  1 - minimal (orderid + modified)
3331:          3 - all of 1 + created, pool
3332: 			5 - full detail
3333:          0xFF - just return objects
3334: </input>
3335: 
3336: <caution>
3337: This can ONLY be used for authenticated buyers.
3338: </caution>
3339: 
3340: </API>
3341: 
3342: <API id="buyerPurchaseHistoryDetail">
3343: <purpose></purpose>
3344: <input id="_cartid"></input>
3345: <input id="orderid"></input>
3346: <caution>
3347: This can ONLY be used for authenticated buyers.
3348: </caution>
3349: 
3350: </API>
3351: 
3352: <API id="appFAQs">
3353: <purpose></purpose>
3354: <input id="_cartid"></input>
3355: <input optional="1" id="filter-keywords"> keywords</input>
3356: <input optional="1" id="filter-topic"> id</input>
3357: <input optional="1" hint="default:all" id="method"> topics|detail|all</input>
3358: <response hint="method:topics|all" id="@topics"> an array of faq topics</response>
3359: <response hint="method:detail|all" id="@detail"> an array of detail faq data for topics</response>
3360: </API>
3361: 
3362: <API id="appSendMessage">
3363: <purpose></purpose>
3364: <input id="_cartid"></input>
3365: <input id="msgtype"> feedback</input>
3366: <input id="sender"> user@domain.com   [the sender of the message]</input>
3367: <input id="subject"> subject of the message</input>
3368: <input id="body"> body of the message</input>
3369: <input optional="1" id="PRODUCT">product-id-this-tellafriend-is-about</input>
3370: <input optional="1" id="OID">2012-01-1234  [the order this feedback is about]</input>
3371: <note>
3372: msgtype:feedback requires 'sender', but ignores 'recipient'
3373: msgtype:tellafriend requires 'recipient', 'product'
3374: msgtype:tellafriend requi 'product'
3375: </note>
3376: 
3377: </API>
3378: 
3379: <API id="appPageGet">
3380: <purpose></purpose>
3381: <input id="PATH"> .path.to.page or @CAMPAIGNID</input>
3382: <input id="@get"> [ 'attrib1', 'attrib2', 'attrib3' ]</input>
3383: <input id="all"> set to 1 to return all fields (handy for json libraries which don't return @get=[]) </input>
3384: <response id="%page"> [ 'attrib1':'xyz', 'attrib2':'xyz' ],</response>
3385: <note>leave @get empty @get = [] for all page attributes</note>
3386: </API>
3387: 
3388: <API id="appStash">
3389: <purpose>store a key</purpose>
3390: <input id="key">key you want to store</input>
3391: <input id="value">value you want to store</input>
3392: </API>
3393: 
3394: <API id="appSuck">
3395: <purpose>retrieve a key</purpose>
3396: <input id="key">key you want to store</input>
3397: <response id="value">key you want to store</response>
3398: </API>
3399: 
3400: <API id="appSearchLogList">
3401: <purpose>lists available search log files</purpose>
3402: </API>
3403: 
3404: <API id="appSearchLogRemove">
3405: <purpose>permanently remove/delete all search logs</purpose>
3406: <input id="FILE">reference file id</input>
3407: </API>
3408: 
3409: <API id="adminDebugSearch">
3410: <purpose>runs a debug search query through the analyzer</purpose>
3411: <input id="VERB">RAWE-QUERY|RAWE-SCHEMA-PID-LIVE|RAWE-SCHEMA-PID-CONFIGURED|RAWE-SHOWPID|RAWE-INDEXPID</input>
3412: <input id="PID">product id (optional)</input>
3413: </API>
3414: 
3415: <API id="adminDebugSite">
3416: <purpose></purpose>
3417: <input id="check-global"></input>
3418: <input id="check-domains"></input>
3419: </API>
3420: 
3421: <API id="adminDebugProduct">
3422: <purpose></purpose>
3423: <input id="PID">product id</input>
3424: </API>
3425: 
3426: 
3427: <API id="adminDebugShipping">
3428: <purpose>does a shipping debug</purpose>
3429: <input id="SRC">ORDER|DEST|CART</input>
3430: <input id="_cartid">SRC:CART</input>
3431: <input id="ITEM1">SRC=DEST: ITEM1,ITEM2,ITEM3</input>
3432: <input id="QTY1">SRC=DEST: QTY1, QTY2, QTY3</input>
3433: <input id="ZIP">SRC=DEST:</input>
3434: <input id="ZIP">SRC=DEST:</input>
3435: <input id="STATE">SRC=DEST:</input>
3436: <input id="COUNTRY">SRC=DEST:</input>
3437: <input id="ORDERID">SRC=ORDER</input>
3438: <input id=""></input>
3439: </API>
3440: 
3441: <API id="adminDebugPromotion">
3442: <purpose>does a promotion debug</purpose>
3443: <input id="SRC">ORDER|DEST|CART</input>
3444: <input id="_cartid">SRC:CART</input>
3445: <input id="ITEM1">SRC=DEST: ITEM1,ITEM2,ITEM3</input>
3446: <input id="QTY1">SRC=DEST: QTY1, QTY2, QTY3</input>
3447: <input id="ZIP">SRC=DEST:</input>
3448: <input id="ZIP">SRC=DEST:</input>
3449: <input id="STATE">SRC=DEST:</input>
3450: <input id="COUNTRY">SRC=DEST:</input>
3451: <input id="ORDERID">SRC=ORDER</input>
3452: <input id=""></input>
3453: </API>
3454: 
3455: <API id="adminDebugTaxes">
3456: <purpose>does a tax debug</purpose>
3457: <input id="SRC">ORDER|DEST|CART</input>
3458: <input id="_cartid">SRC:CART</input>
3459: <input id="ITEM1">SRC=DEST: ITEM1,ITEM2,ITEM3</input>
3460: <input id="QTY1">SRC=DEST: QTY1, QTY2, QTY3</input>
3461: <input id="ZIP">SRC=DEST:</input>
3462: <input id="ZIP">SRC=DEST:</input>
3463: <input id="STATE">SRC=DEST:</input>
3464: <input id="COUNTRY">SRC=DEST:</input>
3465: <input id="ORDERID">SRC=ORDER</input>
3466: <input id=""></input>
3467: </API>
3468: 
3469: <API id="adminConfigDetail">
3470: <purpose>to obtain detail on a configuration object</purpose>
3471: <input id="order">include %ORDER in response (contains current order sequence #)</input>
3472: <input id="wms">include %WMS in response</input>
3473: <input id="plugins">include @PLUGINS in response</input>
3474: <input id="erp">include %ERP in response</input>
3475: <input id="inv">include %INVENTORY in response</input>
3476: <input id="prts">include @PRTS in response</input>
3477: <input id="payments">include @PAYMENTS in response</input>
3478: <input id="shipping">include %SHIPPING in response</input>
3479: <input id="shipmethods">include @SHIPMENTS in response</input>
3480: </API>
3481: 
3482: <API id="adminVendorSearch">
3483: </API>
3484: 
3485: <API id="adminVendorCreate">
3486: </API>
3487: 
3488: <API id="adminVendorUpdate">
3489: </API>
3490: 
3491: <API id="adminVendorMacro">
3492: </API>
3493: 
3494: <API id="adminVendorDetail">
3495: </API>
3496: 
3497: <API id="adminVendorRemove">
3498: </API>
3499: 
3500: <API id="adminWarehouseList">
3501: <output id="@WAREHOUSES"></output>
3502: </API>
3503: 
3504: <API id="adminWarehouseDetail">
3505: </API>
3506: 
3507: <API id="adminWarehouseInventoryQuery">
3508: <input id="GEO">geocode of warehouse</input>
3509: <input id="SKU" optional="1">SKU to filter by</input>
3510: <input id="SKUS" optional="1">SKU1,SKU2,SKU3 to filter by</input>
3511: <input id="LOC" optional="1">LOC to filter by</input>
3512: <output id="@ROWS">
3513: </output>
3514: </API>
3515: 
3516: <API id="adminWarehouseMacro">
3517: <purpose>to create/update/delete/modify (via macro) the wms system</purpose>
3518: <input id="WAREHOUSE"></input>
3519: <input id="@updates">an array of cmd objects</input>
3520: <example><![CDATA[
3521: * 
3522: ]]></example>
3523: </API>
3524: 
3525: 
3526: <API id="appConfigMacro">
3527: <purpose>to create/update/delete/modify (via macro) a configuration object</purpose>
3528: <input id="@updates">an array of cmd objects</input>
3529: <example><![CDATA[
3530: * GLOBAL/WMS?active=1|0
3531: * GLOBAL/ERP?active=1|0
3532: * GLOBAL/ORDERID?start=####
3533: * GLOBAL/ACCOUNT?
3534: * GLOBAL/FLEXEDIT-SAVE?json=
3535: * GLOBAL/SITE-FIX 		(not finished)
3536: * GLOBAL/ADD-RESERVED-DOMAIN?
3537: * GLOBAL/SEARCH?SYNONYMS=&STOPWORDS=&CHARACTERMAP=
3538: * GLOBAL/PARTITIONCREATE?name=&domain=&navcats=
3539: * GLOBAL/INVENTORY?inv_mode=1|3&inv_website_remove=1|0
3540: * NOTIFICATION/DATATABLE-EMPTY?event=ENQUIRY.ORDER
3541: * NOTIFICATION/DATATABLE-INSERT?event=ENQUIRY.ORDER
3542: * CRM-CONFIG?ticket_number=&sequence=&email_cleanup&email=
3543: * TAXRULES/EMPTY?tax_rules=
3544: * TAXRULES/INSERT?type=&state=&city=&zipspan=&zip4=&country=&intprovince=&intzip=&rate=&zone=&expires=
3545: * COUPON/INSERT?coupon=&begins=YYYYMMDDHHMMSS&expires=YYYYMMDDHHMMSS&taxable=&stackable=&disabled=&limiteduse=&title=&image=
3546: * COUPON/UPDATE?coupon=&begins=YYYYMMDDHHMMSS&expires=YYYYMMDDHHMMSS&taxable=&stackable=&disabled=&limiteduse=&title=&image=
3547: * COUPON/REMOVE?coupon=
3548: * PROMOTIONS?promotion_advanced=0|1
3549: * COUPON/RULESTABLE-EMPTY?coupon=
3550: * COUPON/RULESTABLE-REMOVE?coupon=
3551: * COUPON/RULESTABLE-MOVEUP?coupon=&ID=
3552: * COUPON/RULESTABLE-MOVEDOWN?coupon=&ID=
3553: * COUPON/RULESTABLE-INSERT?coupon=&match=&name=&filter=&exec=&value=&weight=&matchvalue
3554: * SHIPPING/CONFIG?ship_origin=zip&chkout_deny_ship_po&ship_int_risk=&ship_latency=&ship_cutoff&ship_blacklist=isox,isox,isox&banned=type|match|ts\ntype|match|ts
3555: * SHIPPING/BANNEDTABLE-EMPTY
3556: * SHIPPING/BANNEDTABLE-INSERT?type=&match=&created=
3557: * SHIPMETHOD/FEDEX-REGISTER?account=&address1=&address2=&city=&state=&zip=&country=&firstname=&lastname=&company=&phone=&email=&SUPPLIER=[optional]
3558: * SHIPMETHOD/UPSAPI-REGISTER?shipper_number=&url=&address1=&address2=&city=&state=&zip=&country=&company=&phone=&email=&supplier=optional
3559: * SHIPMETHOD/UPDATE?provider=USPS&usps_dom=&usps_dom_handling&usps_dom_ins&usps_dom_insprice&usps_int_priority=&usps_int_express&usps_int_expressg
3560: * SHIPMETHOD/UPDATE?provider=UPSAPI&upsapii_dom&upsapi_int&supplier=
3561: * SHIPMETHOD/UPDATE?provider=FEDEX&rates=&dom=1|0&int=1|0&supplier=
3562: * SHIPMETHOD/UPDATE?provider=FLEX:CODE&active=1|0&rules=1|0&region=&name=&carrier=&
3563: * SHIPMETHOD/INSERT?provider=FLEX:CODE
3564: * SHIPMETHOD/REMOVE?provider=FLEX:CODE
3565: * SHIPMETHOD/DATATABLE-EMPTY&provider=FLEX:CODE
3566: * SHIPMETHOD/DATATABLE-INSERT&provider=FLEX:CODE&key1=value1&key2=value2
3567: * SHIPMETHOD/DATATABLE-REMOVE&provider=FLEX:CODE&guid=xyz
3568: * SHIPMETHOD/RULESTABLE-EMPTY?provider=&table=
3569: * SHIPMETHOD/RULESTABLE-INSERT?provider=&table=&guid=&name=&filter=&exec=&match=&value=&schedule=&
3570: * SHIPMETHOD/RULESTABLE-UPDATE?provider=&table=&guid=&name=&filter=&exec=&match=&value=&schedule=&
3571: * SHIPMETHOD/RULESTABLE-REMOVE?provider=&table=&guid=&name=&filter=&exec=&match=&value=&schedule=&
3572: * PAYMENT/OFFLINE?tender=CASH|GIFTCARD|PICKUP|CHECK|COD|CHKOD|PO|WIRE&fee=&instructions=&payto=
3573: * PAYMENT/GATEWAY?tender=CC&
3574: * PAYMENT/GATEWAY?tender=ECHECK&
3575: * PAYMENT/WALLET-AMZPAY?tender=AMZPAY&color=&size=&background&env=0|1|2
3576: * PAYMENT/WALLET-GOOGLE?tender=GOOGLE&google_key=&google_merchantid=&google_api_env=&google_api_analytics=&google_api_merchantcalc=&google_dest_zip=&google_int_shippolicy=&google_pixelurls=&google_tax_tables=
3577: * PAYMENT/WALLET-PAYPALEC?tender=PAYPALEC&paypal_api_env&paypal_api_reqconfirmship&paypal_api_callbacks&paypal_email&paypal_api_user&paypal_api_pass&paypal_api_sig&paypal_paylater&
3578: * PAYMENT/CUSTOM?tender=CUSTOM&description=
3579: 
3580: ]]></example>
3581: </API>
3582: 
3583: <API id="appPageSet">
3584: <purpose></purpose>
3585: <input id="PATH"> .path.to.page or @CAMPAIGNID</input>
3586: <input id="%page"> an associative array of values you want updated</input>
3587: <response id="attrib"></response>
3588: <note>leave @get empty @get = [] for all page attributes</note>
3589: </API>
3590: 
3591: <API id="appShippingTransitEstimate">
3592: <purpose></purpose>
3593: <input id="@products">[pid1,pid2,pid3]</input>
3594: <input id="ship_postal">92012</input>
3595: <input id="ship_country">US</input>
3596: <note></note>
3597: <response hint="@Services">
3598: <![CDATA[
3599:                            {
3600:                              'arrival_time' => '23:00:00',
3601:                              'amzcc' => 'UPS',
3602:                              'UPS.Service.Description' => 'UPS Ground',
3603:                              'UPS.EstimatedArrival.DayOfWeek' => 'TUE',
3604:                              'carrier' => 'UPS',
3605:                              'expedited' => '0',
3606:                              'UPS.Guaranteed' => 'Y',
3607:                              'method' => 'UPS Ground',
3608:                              'code' => 'UGND',
3609:                              'ups' => 'GND',
3610:                              'arrival_date' => '20120715',
3611:                              'amzmethod' => 'UPS Ground',
3612:                              'buycomtc' => '1',
3613:                              'upsxml' => '03',
3614:                              'UPS.EstimatedArrival.PickupDate' => '2012-07-10',
3615:                              'transit_days' => 5
3616:                            } 
3617: ]]></response>
3618: <response hint="ships_yyyymmdd">which day the order is expected to ship (not arrive)</response>
3619: <response hint="cutoff_hhmm">hour and minute (pst) that the order must be placed by</response>
3620: <response hint="latency_days">maximum days before order ships</response>
3621: 
3622: </API>
3623: 
3624: <API id="appSupplierInit">
3625: <purpose></purpose>
3626: <input id="supplier">xyz\@domain.com</input>
3627: <input id="password">1234</input>
3628: </API>
3629: 
3630: <API id="appSupplierAuthorize">
3631: <purpose></purpose>
3632: <input id="_cartid"> (must start with a ':') as returned by appSupplierInit</input>
3633: <input id="hashtype"> md5|sha1</input>
3634: <input id="hashpass"> hashtype(password+_cartid)</input>
3635: <hint>
3636: hashpass is generated by computing the md5 or sha1 hexadecimal value of the concatenation 
3637: of both the plain text password, and the _cartid. Here are some examples (all examples assume password is 'secret' and 
3638: the cartid is ':1234' 
3639: MySQL: md5(concat('secret',':1234')) = 1ed15901cfc0cb8c61b43a440d853d45
3640: MySQL: sha1(concat('secret',':1234')) = d9bc94d9c90e5de7a1c43a34f262d348244e9505
3641: </hint>
3642: 
3643: </API>
3644: 
3645: <API id="appResource">
3646: <purpose></purpose>
3647: <input id="filename">filename.json</input>
3648: <note>
3649: * shipcodes.json
3650: * shipcountries.json
3651: * payment_status.json
3652: * flexedit.json 
3653: * review_status.json : a complete list of all valid review codes
3654: * integrations.json : used to identify the MKT values in syndication/orders
3655: * email_macros.json : 
3656: * inventory_conditions.json : a complete list of all inventory conditions
3657: * ups_license.json :
3658: * syndication_buy_storecodes.json
3659: * syndication_buy_categories.json
3660: * syndication_wsh_categories.json
3661: * syndication_goo_categories.json
3662: * definitions/amz/[catalog].json : replace [catalog] with contents of amz:catalog field.
3663: </note>
3664: <response id="json">content to eval</response>
3665: 
3666: 
3667: 
3668: NOTE: You may also request filename.yaml or filename.xml (and the corresponding xml: or yaml: format will be returned)
3669: 
3670: </API>
3671: 
3672: <API id="stub">
3673: <purpose></purpose>
3674: <input id="_cartid"></input>
3675: <note>Does nothing, just a stub.</note>
3676: </API>
3677: 
3678: <SECTION>
3679: <h1>Releases Notes</h1>
3680: * 2011/05/04: Added CUSTOMERPROCESS API call.
3681: [[/SUBSECTION]]
3682: 
3683: 
3684: </SECTION>
3685: 
3686: <SECTION>
3687: <h1>Compatibility Levels</h1>
3688: Current minimum compatibility level: 200 (released 11/15/10)
3689: [[BREAK]]
3690: [[STAFF]]
3691: ** when bumping compatibility level we should also change $WEBAPI::MAX_ALLOWED_COMPAT_LEVEL 
3692: [[/STAFF]]
3693: 
3694: * 210: 9/17/12	 addition of uuid= in stuff
3695: * 205: 1/5/12   ADDPRIVATE macro does an overrite, not an append. (backward compatibility release)
3696: * 204: 12/29/11 fixes issues with payment processing (not explicitly declared in code, because they're "SAFE"/forward compat)
3697: * 203: 10/24/11	has strict encoding rules for options, modifier must be encoded or there will be an error.
3698: * 202: 10/24/11	(version 202 and lower adds backward support (via strip) for double quotes in stuff item options modifier=)
3699: * 202: 5/6/11	 extends MSGID in emails node from 24 characters from 10
3700: * 201: 2/16/11   adds MSGTYPE TICKET in emails node to WEBDBSYNC
3701: * 200: 11/15/10  order generation version 5
3702: * 117: 4/7/09  changes webdb sync in versioncheck
3703: * 116: 5/21/08 re-enables image delete (for 116 and higher)
3704: * 116: 4/10/08 note: 115 is was never apparently released due to bugs, skipping to 116 to be safe.
3705: * 115: 2/23/08  [note: released to 114] changed format for stids (cheap hack: e.g.  abc/123*xyz:ffff  becomes 12
3706: * 114: 12/26/07 new email changes (shuts down sendmail)
3707: * 113: skipped for bad luck
3708: * 112: 10/27/07 versions below have backward compatibility for company_logo in merchant sync
3709: * 111: 10/09/07 convert ZOM and ZWM clients to ZID
3710: * 110: 8/21/07 changes to events (ts was time)
3711: * 109: 4/19/07 implements zoovy.virtual zoovy.prod_supplier zoovy.prod_supplierid removes supplier from skulist.
3712: * 108: 3/13/07 changes xml output of stuff for orders
3713: </SECTION>
3714: 
3715: 
3716: <API id="adminBatchJobParametersList">
3717: <purpose></purpose>
3718: <input id="BATCH_EXEC" value=""></input>
3719: <output id="@PARAMETERS">
3720: [
3721: { UUID:"", TITLE:"", BATCH_EXEC:"", LASTRUN_TS:"", LASTJOB_ID:"", PRIVATE:1  }
3722: ]
3723: </output>
3724: </API> 
3725: 
3726: <API id="adminBatchJobParametersCreate">
3727: <purpose></purpose>
3728: UUID:(optional)
3729: TITLE: 
3730: BATCH_EXEC: 
3731: %vars: { variables based on type }
3732: PRIVATE : 1|0 (will only appear in list for this user)
3733: </API> 
3734: 
3735: <API id="adminBatchJobParametersRemove">
3736: <purpose></purpose>
3737: UUID:(optional)
3738: </API> 
3739: 
3740: <API id="adminBatchJobList">
3741: <purpose></purpose>
3742: <output id="@JOBS">
3743: type:job, id:####, guid:(guid), status:, title:
3744: </output>
3745: </API> 
3746: 
3747: <API id="adminBatchJobCreate">
3748: <purpose></purpose>
3749: guid:(optional)
3750: type: SYNDICATION|REPORT|UTILITY,etc.
3751: %vars: { variables based on type }
3752: </API> 
3753: 
3754: 
3755: <API id="adminBatchJobStatus">
3756: <purpose></purpose>
3757: </API> 
3758: 
3759: <API id="adminBatchJobCleanup">
3760: <purpose></purpose>
3761: </API> 
3762: 
3763: <API id="adminBatchJobDownload">
3764: <purpose></purpose>
3765: <input id="GUID"></input>
3766: <input id="base64"></input>
3767: <output id="FILENAME"></output>
3768: <output id="MIME"></output>
3769: <output id="body"></output>
3770: </API> 
3771: 
3772: <API id="adminMySystemHealth">
3773: <purpose>
3774: Runs a series of diagnostics and returns 3 arrays @SYSTEM, @MYAPPS, @MARKET
3775: the call itself may be *VERY* slow - taking up to 30 seconds.
3776: 
3777: each array will contain one or more responses ex:
3778: { 
3779: 	'type':'critical|issue|alert|bad|fyi|good',
3780: 	'system':'a short (3-12 char) global unique identifier for the system ex: Inventory',
3781: 	'title':'a pretty title for the message',
3782: 	'detail':'not always included, but provides more detail about a specific issue what that could mean, ex:
3783: an unusually large number of unprocessed events does not mean there is a problem per-se,
3784: it means many automation systems such as inventory, supply chain, 
3785: marketplace tracking notifications and more could be delayed.',
3786: 	'debug':'xozo some internal crap that means something to a developer',
3787: }
3788: 
3789: </purpose>
3790: <response id="@SYSTEM"></response>
3791: <response id="@MYAPPS"></response>
3792: <response id="@MARKET"></response>
3793: </API>
3794: 
3795: <API id="adminTechnicalRequest">
3796: <purpose></purpose>
3797: <input id="METHOD">CREATE</input>
3798: </API>
3799: 
3800: <API id="adminMessagesList">
3801: <purpose></purpose>
3802: <input id="msgid"></input>
3803: <example><![CDATA[
3804: ConfigVersion
3805: Response
3806: ResponseMsg
3807: ]]></example>
3808: </API>
3809: 
3810: <API id="adminMessagesClear">
3811: <purpose></purpose>
3812: <input id="msgid"></input>
3813: <example><![CDATA[
3814: ConfigVersion
3815: Response
3816: ResponseMsg
3817: ]]></example>
3818: </API>
3819: 
3820: 
3821: <API id="adminAccountDetail">
3822: <purpose>Generates a new securekey for a given client. You must be given a client code by Zoovy to use this.</purpose>
3823: </API>
3824: 
3825: <API id="adminVersionCheck">
3826: <purpose></purpose>
3827: <input id="client"></input>
3828: <input id="version"></input>
3829: <input id="stationid"></input>
3830: <input id="subuser"></input>
3831: <input id="localip"></input>
3832: <input id="osver"></input>
3833: <input id="finger"></input>
3834: <purpose>Checks the clients version and compatibility level against the API's current compatibility level.</purpose>
3835: <output><![CDATA[
3836: RESPONSE can be either
3837: * OKAY - proceed with normal
3838: * FAIL - a reason for the failure
3839: * WARN - a warning, but it is okay to proceed
3840: ]]></output>
3841: <example><![CDATA[
3842: ConfigVersion
3843: Response
3844: ResponseMsg
3845: ]]></example>
3846: </API>
3847: 
3848: <API id="adminPublicFileList">
3849: <purpose>
3850: Public files are hosted at a URL and can be downloaded, they are usually things like short videos, etc.
3851: </purpose>
3852: <input id="fileguid">guid from fileupload</input>
3853: <input id="filename"></input>
3854: </API>
3855: 
3856: <API id="adminPublicFileDelete">
3857: <purpose>
3858: Public files are hosted at a URL and can be downloaded, they are usually things like short videos, etc.
3859: </purpose>
3860: <input id="fileguid">guid from fileupload</input>
3861: <input id="filename"></input>
3862: </API>
3863: 
3864: <API id="adminPublicFileUpload">
3865: <purpose>
3866: Public files are hosted at a URL and can be downloaded, they are usually things like short videos, etc.
3867: </purpose>
3868: <input id="fileguid">guid from fileupload</input>
3869: <input id="filename"></input>
3870: </API>
3871: 
3872: 
3873: <API id="adminCSVExport">
3874: <input id="export">CATEGORY|REWRITES</input>
3875: <output id="lines"># of lines in the file</output>
3876: <output id="body"></output>
3877: <output id="base64">base64</output>
3878: </API>
3879: 
3880: 
3881: <API id="adminCSVImport">
3882: <purpose><![CDATA[
3883: This is a wrapper around the CSV file import available in the user interface.
3884: Creates an import batch job. Filetype may be one of the following:
3885: * PRODUCT
3886: * INVENTORY
3887: * CUSTOMER
3888: * ORDER
3889: * CATEGORY
3890: * REVIEW
3891: * REWRITES
3892: * RULES
3893: * LISTINGS
3894: 
3895: ]]></purpose>
3896: <hint>
3897: The file type may also be overridden in the header. See the CSV import documentation for current
3898: descriptions of the file. 
3899: </hint>
3900: <input id="filetype">PRODUCT|INVENTORY|CUSTOMER|ORDER|CATEGORY|REVIEW|REWRITES|RULES|LISTINGS</input>
3901: <input id="fileguid">guid from fileupload</input>
3902: <input id="[headers]">any specific headers for the file import</input>
3903: <output id="JOBID"></output>
3904: </API>
3905: 
3906: <API id="API: adminOrderReserve">
3907: <purpose></purpose>
3908: <input id="count"></input>
3909: <response>
3910: Returns an array, a list of order #'s
3911: </response>
3912: </API>
3913: 
3914: <API id="adminWalletList">
3915: <purpose></purpose>
3916: 
3917: <input id="method">CHANGED</input>
3918: <input id="limit">###</input>
3919: <example><![CDATA[
3920: 
3921: @WALLETS : [
3922: { ID="" CID="" CREATED="" EXPIRES="" IS_DEFAULT="" DESCRIPTION="" ATTEMPTS="" FAILURES="" IS_DELETED="" }
3923: { ID="" CID="" CREATED="" EXPIRES="" IS_DEFAULT="" DESCRIPTION="" ATTEMPTS="" FAILURES="" IS_DELETED="" }
3924: { ID="" CID="" CREATED="" EXPIRES="" IS_DEFAULT="" DESCRIPTION="" ATTEMPTS="" FAILURES="" IS_DELETED="" }
3925: 
3926: ]]>
3927: </example>
3928: <input id="method">ACK</input>
3929: <input id="@WALLETS">an array of wallets to ack.</input>
3930: </API>
3931: 
3932: </xml>
